Index: ecommerce/accounts/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom drf_spectacular.utils import extend_schema\r\nfrom rest_framework import status\r\nfrom .models import User, Address, Country, City\r\nfrom .serializers import (\r\n    UserSerializer,\r\n    AddressSerializer,\r\n    CountrySerializer,\r\n    CitySerializer,\r\n    ChangePasswordSerializer,\r\n)\r\nfrom django.shortcuts import get_object_or_404\r\nimport jwt\r\nfrom django.conf import settings\r\nfrom rest_framework.exceptions import AuthenticationFailed\r\nfrom rest_framework.permissions import IsAuthenticated, IsAdminUser\r\nfrom core.permissions import IsOwnerOrAdmin\r\nfrom rest_framework import generics\r\nfrom django_filters.rest_framework import DjangoFilterBackend\r\nfrom rest_framework import filters\r\nfrom rest_framework.generics import ListAPIView\r\n\r\n\r\n@extend_schema(tags=[\"Users\"])\r\nclass UserList(ListAPIView):\r\n    \"\"\"\r\n    user list\r\n    \"\"\"\r\n    permission_classes = [IsAdminUser]\r\n    serializer_class = UserSerializer\r\n    queryset = User.objects.all()\r\n\r\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\r\n    filterset_fields = ['is_active', 'is_staff']\r\n    search_fields = ['username', 'email', 'first_name', 'last_name']\r\n    ordering_fields = ['username', 'email', 'date_joined']\r\n\r\n@extend_schema(tags=[\"Users\"])\r\nclass UserDetail(APIView):\r\n    \"\"\"\r\n    account detail\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = UserSerializer\r\n\r\n    def get(self, request, pk):\r\n        user = get_object_or_404(User, pk=pk)\r\n        self.check_object_permissions(request, user)\r\n        srz_data = self.serializer_class(user)\r\n        return Response(srz_data.data, status=status.HTTP_200_OK)\r\n\r\n@extend_schema(tags=[\"Users\"])\r\nclass UserCreate(APIView):\r\n    \"\"\"\r\n    create a new user\r\n    \"\"\"\r\n\r\n    serializer_class = UserSerializer\r\n\r\n    def post(self, request):\r\n        srz_data = self.serializer_class(data=request.data)\r\n        if srz_data.is_valid():\r\n            srz_data.save()\r\n            return Response(srz_data.data, status=status.HTTP_201_CREATED)\r\n        return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n@extend_schema(tags=[\"Users\"])\r\nclass UserUpdate(APIView):\r\n    \"\"\"\r\n    update a user\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = UserSerializer\r\n\r\n    def put(self, request, pk):\r\n        queryset = get_object_or_404(User, id=pk)\r\n        self.check_object_permissions(request, queryset)\r\n        srz_data = self.serializer_class(queryset, data=request.data, partial=True)\r\n        if srz_data.is_valid():\r\n            srz_data.save()\r\n            return Response(srz_data.data, status=status.HTTP_200_OK)\r\n        return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n@extend_schema(tags=[\"Users\"])\r\nclass UserDelete(APIView):\r\n    \"\"\"\r\n    user delete\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = UserSerializer\r\n\r\n    def delete(self, request, pk):\r\n        user = get_object_or_404(User, pk=pk)\r\n        self.check_object_permissions(request, user)\r\n        user.is_active = False\r\n        user.save()\r\n        serializer = self.serializer_class(user)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n\r\n@extend_schema(tags=[\"Addresses\"])\r\nclass AddressList(APIView):\r\n    \"\"\"\r\n    address list\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAdminUser]\r\n    serializer_class = AddressSerializer\r\n\r\n    def get(self, request):\r\n        queryset = Address.objects.all()\r\n        self.check_object_permissions(request, queryset)\r\n        srz_data = self.serializer_class(queryset, many=True)\r\n        return Response(srz_data.data)\r\n\r\n\r\n@extend_schema(tags=[\"Addresses\"])\r\nclass AddressDetail(APIView):\r\n    \"\"\"address detail\"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = AddressSerializer\r\n\r\n    def get(self, request, pk):\r\n        address = get_object_or_404(Address, pk=pk)\r\n        self.check_object_permissions(request, address)\r\n        srz_data = self.serializer_class(address)\r\n        return Response(srz_data.data)\r\n\r\n\r\n@extend_schema(tags=[\"Addresses\"])\r\nclass AddressCreate(APIView):\r\n    \"\"\"\r\n    create a new address\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = AddressSerializer\r\n\r\n    def post(self, request):\r\n        current_user = get_current_user_from_token(request)\r\n        srz_data = self.serializer_class(data=request.data)\r\n        if srz_data.is_valid():\r\n            srz_data.save(user=current_user)\r\n            return Response(srz_data.data, status=status.HTTP_201_CREATED)\r\n        print(srz_data.errors)\r\n        return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@extend_schema(tags=[\"Addresses\"])\r\nclass AddressUpdate(APIView):\r\n    \"\"\"\r\n    update a address\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = AddressSerializer\r\n\r\n    def put(self, request, pk):\r\n        queryset = get_object_or_404(Address, pk=pk)\r\n        self.check_object_permissions(request, queryset)\r\n        srz_data = self.serializer_class(queryset, data=request.data, partial=True)\r\n        if srz_data.is_valid():\r\n            srz_data.save()\r\n            return Response(srz_data.data, status=status.HTTP_200_OK)\r\n        return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@extend_schema(tags=[\"Addresses\"])\r\nclass AddressDelete(APIView):\r\n    \"\"\"\r\n    address delete\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = AddressSerializer\r\n\r\n    def delete(self, request, pk):\r\n        address = get_object_or_404(Address, id=pk)\r\n        self.check_object_permissions(request, address)\r\n        address.is_active = False\r\n        address.save()\r\n        serializer = self.serializer_class(address)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n\r\n@extend_schema(tags=[\"Countries\"])\r\nclass CountryList(APIView):\r\n    \"\"\"\r\n    country list\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = CountrySerializer\r\n\r\n    def get(self, request):\r\n        queryset = Country.objects.all()\r\n        srz_data = self.serializer_class(queryset, many=True)\r\n        return Response(srz_data.data)\r\n\r\n\r\n@extend_schema(tags=[\"Cities\"])\r\nclass CityList(APIView):\r\n    \"\"\"\r\n    city list\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = CitySerializer\r\n\r\n    def get(self, request):\r\n        queryset = City.objects.all()\r\n        srz_data = self.serializer_class(queryset, many=True)\r\n        return Response(srz_data.data)\r\n\r\n@extend_schema(tags=[\"ChangePassword\"])\r\nclass ChangePasswordView(generics.GenericAPIView):\r\n    \"\"\"\r\n    change password with valid password\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = ChangePasswordSerializer\r\n\r\n    def put(self, request):\r\n        serializer = self.serializer_class(\r\n            data=request.data, context={\"request\": request}\r\n        )\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response({\"message\": \"your password changed!!\"}, status=200)\r\n        return Response(serializer.errors, status=400)\r\n\r\n\r\n\"\"\"for getting user ID in \"\"\"\r\n\r\n\r\ndef get_current_user_from_token(request):\r\n    # استخراج توکن از header\r\n    auth_header = request.headers.get(\"Authorization\")\r\n\r\n    if not auth_header or not auth_header.startswith(\"Bearer \"):\r\n        raise AuthenticationFailed(\"توکن یافت نشد یا فرمت اشتباه است.\")\r\n\r\n    token = auth_header.split(\" \")[1]\r\n\r\n    try:\r\n        # دیکود کردن توکن با secret key\r\n        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[\"HS256\"])\r\n        user_id = payload.get(\"user_id\")\r\n\r\n        if user_id is None:\r\n            raise AuthenticationFailed(\"توکن معتبر نیست.\")\r\n\r\n        try:\r\n            user = User.objects.get(id=user_id)\r\n            return user\r\n\r\n        except User.DoesNotExist:\r\n            raise AuthenticationFailed(\"کاربر یافت نشد.\")\r\n\r\n    except jwt.ExpiredSignatureError:\r\n        raise AuthenticationFailed(\"توکن منقضی شده.\")\r\n\r\n    except jwt.InvalidTokenError:\r\n        raise AuthenticationFailed(\"توکن نامعتبر است.\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/accounts/views.py b/ecommerce/accounts/views.py
--- a/ecommerce/accounts/views.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/accounts/views.py	(date 1748963591896)
@@ -27,14 +27,20 @@
     """
     user list
     """
+
     permission_classes = [IsAdminUser]
     serializer_class = UserSerializer
     queryset = User.objects.all()
 
-    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
-    filterset_fields = ['is_active', 'is_staff']
-    search_fields = ['username', 'email', 'first_name', 'last_name']
-    ordering_fields = ['username', 'email', 'date_joined']
+    filter_backends = [
+        DjangoFilterBackend,
+        filters.SearchFilter,
+        filters.OrderingFilter,
+    ]
+    filterset_fields = ["is_active", "is_staff"]
+    search_fields = ["username", "email", "first_name", "last_name"]
+    ordering_fields = ["username", "email", "date_joined"]
+
 
 @extend_schema(tags=["Users"])
 class UserDetail(APIView):
@@ -51,6 +57,7 @@
         srz_data = self.serializer_class(user)
         return Response(srz_data.data, status=status.HTTP_200_OK)
 
+
 @extend_schema(tags=["Users"])
 class UserCreate(APIView):
     """
@@ -66,6 +73,7 @@
             return Response(srz_data.data, status=status.HTTP_201_CREATED)
         return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)
 
+
 @extend_schema(tags=["Users"])
 class UserUpdate(APIView):
     """
@@ -84,6 +92,7 @@
             return Response(srz_data.data, status=status.HTTP_200_OK)
         return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)
 
+
 @extend_schema(tags=["Users"])
 class UserDelete(APIView):
     """
@@ -217,6 +226,7 @@
         srz_data = self.serializer_class(queryset, many=True)
         return Response(srz_data.data)
 
+
 @extend_schema(tags=["ChangePassword"])
 class ChangePasswordView(generics.GenericAPIView):
     """
@@ -236,7 +246,7 @@
         return Response(serializer.errors, status=400)
 
 
-"""for getting user ID in """
+"""for getting user ID in heather of token"""
 
 
 def get_current_user_from_token(request):
Index: ecommerce/accounts/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\r\nfrom .models import User, Address, Country, City\r\nfrom django.contrib.auth.password_validation import validate_password\r\nfrom django.core import exceptions\r\n\r\n\r\nclass CountrySerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Country\r\n        fields = [\"id\", \"name\"]\r\n\r\n\r\nclass CitySerializer(serializers.ModelSerializer):\r\n    country = CountrySerializer()\r\n\r\n    class Meta:\r\n        model = City\r\n        fields = [\"id\", \"name\", \"country\"]\r\n\r\n        \"\"\" this code is for showing all of thing in CountrySerializer \"\"\"\r\n\r\n        def to_representation(self, instance):\r\n            rep = super().to_representation(instance)\r\n            rep[\"country\"] = CountrySerializer(instance.country).data\r\n            return rep\r\n\r\n\r\nclass UserSerializer(serializers.ModelSerializer):\r\n    password1 = serializers.CharField(write_only=True)\r\n    password2 = serializers.CharField(write_only=True)\r\n    class Meta:\r\n\r\n        model = User\r\n        fields = [\r\n            \"id\",\r\n            \"username\",\r\n            \"email\",\r\n            \"phone\",\r\n            \"role\",\r\n            \"password1\",\r\n            \"password2\",\r\n            \"created_at\",\r\n            \"updated_at\",\r\n        ]\r\n        extra_kwargs = {\r\n            \"role\": {\"read_only\": True},\r\n            \"created_at\": {\"read_only\": True},\r\n            \"updated_at\": {\"read_only\": True},\r\n        }\r\n\r\n    def validate(self, attrs):\r\n        password1 = attrs.get(\"password1\")\r\n        password2 = attrs.get(\"password2\")\r\n\r\n        if password1 or password2:\r\n            if password1 != password2:\r\n                raise serializers.ValidationError(\"Passwords must match\")\r\n\r\n            try:\r\n                validate_password(password1)\r\n            except exceptions.ValidationError as e:\r\n                raise serializers.ValidationError({\"password1\": list(e.messages)})\r\n\r\n        return attrs\r\n\r\n    \"\"\"for hashing password\"\"\"\r\n\r\n    def create(self, validated_data):\r\n        password = validated_data.pop(\"password1\")\r\n        validated_data.pop(\"password2\")\r\n\r\n        user = User(**validated_data)\r\n        user.set_password(password)\r\n        user.save()\r\n        return user\r\n\r\n    # \"\"\"to responce just id and username\"\"\"\r\n    # def to_representation(self, instance):\r\n    #     # فقط id و username در پاسخ برگشت داده میشه\r\n    #     return {\r\n    #         'id': instance.id,\r\n    #         'username': instance.username\r\n    #     }\r\n\r\n\r\nclass AddressSerializer(serializers.ModelSerializer):\r\n    #using serializers of user and city for mor information like name and id of city and user fild fore get method\r\n    city = serializers.SerializerMethodField()\r\n    user = serializers.SerializerMethodField()\r\n\r\n    class Meta:\r\n        model = Address\r\n        fields = [\r\n            \"id\",\r\n            \"city\",\r\n            \"user\",\r\n            \"street\",\r\n            \"zip_code\",\r\n            \"is_active\",\r\n            \"created_at\",\r\n            \"updated_at\",\r\n        ]\r\n        extra_kwargs = {\"user\": {\"read_only\": True}}\r\n\r\n    \"\"\"for getting more information about user and city(id,name)\"\"\"\r\n    def get_city(self, obj):\r\n\r\n        return {\r\n            \"id\": obj.city.id,\r\n            \"name\": obj.city.name\r\n        }\r\n\r\n    def get_user(self, obj):\r\n\r\n        return {\r\n            \"id\": obj.user.id,\r\n            \"name\": obj.user.username  # یا هر فیلدی که به عنوان نام کاربر دارید\r\n        }\r\n\r\nclass ChangePasswordSerializer(serializers.Serializer):\r\n    \"\"\"changing password from user\"\"\"\r\n\r\n    old_password = serializers.CharField(required=True)\r\n    new_password = serializers.CharField(required=True)\r\n    new_password1 = serializers.CharField(required=True)\r\n\r\n    def validate(self, attrs):\r\n        if attrs[\"new_password\"] != attrs[\"new_password1\"]:\r\n            raise serializers.ValidationError(\"password dosent match\")\r\n\r\n        validate_password(attrs[\"new_password\"])\r\n\r\n        user = self.context[\"request\"].user\r\n        if not user.check_password(attrs[\"old_password\"]):\r\n            raise serializers.ValidationError(\"رمز فعلی اشتباه است.\")\r\n\r\n        return attrs\r\n\r\n    def save(self, **kwargs):\r\n        user = self.context[\"request\"].user\r\n        user.set_password(self.validated_data[\"new_password\"])\r\n        user.save()\r\n        return user\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/accounts/serializers.py b/ecommerce/accounts/serializers.py
--- a/ecommerce/accounts/serializers.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/accounts/serializers.py	(date 1748963536248)
@@ -28,6 +28,7 @@
 class UserSerializer(serializers.ModelSerializer):
     password1 = serializers.CharField(write_only=True)
     password2 = serializers.CharField(write_only=True)
+
     class Meta:
 
         model = User
@@ -84,7 +85,7 @@
 
 
 class AddressSerializer(serializers.ModelSerializer):
-    #using serializers of user and city for mor information like name and id of city and user fild fore get method
+    # using serializers of user and city for mor information like name and id of city and user fild fore get method
     city = serializers.SerializerMethodField()
     user = serializers.SerializerMethodField()
 
@@ -103,19 +104,18 @@
         extra_kwargs = {"user": {"read_only": True}}
 
     """for getting more information about user and city(id,name)"""
+
     def get_city(self, obj):
 
-        return {
-            "id": obj.city.id,
-            "name": obj.city.name
-        }
+        return {"id": obj.city.id, "name": obj.city.name}
 
     def get_user(self, obj):
 
         return {
             "id": obj.user.id,
-            "name": obj.user.username  # یا هر فیلدی که به عنوان نام کاربر دارید
+            "name": obj.user.username,  # یا هر فیلدی که به عنوان نام کاربر دارید
         }
+
 
 class ChangePasswordSerializer(serializers.Serializer):
     """changing password from user"""
Index: ecommerce/ecommerce/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for ecommerce project.\r\n\r\nGenerated by 'django-admin startproject' using Django 5.2.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/5.2/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/5.2/ref/settings/\r\n\"\"\"\r\nfrom email.policy import default\r\nfrom pathlib import Path\r\nfrom datetime import timedelta\r\nimport os\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-REPLACE_THIS_WITH_A_REAL_SECRET_KEY'\r\nDEBUG = True\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    \"django.contrib.admin\",\r\n    \"django.contrib.auth\",\r\n    \"django.contrib.contenttypes\",\r\n    \"django.contrib.sessions\",\r\n    \"django.contrib.messages\",\r\n    \"django.contrib.staticfiles\",\r\n    \"rest_framework\",\r\n    \"accounts\",\r\n    \"catalog\",\r\n    \"orders\",\r\n    \"interactions\",\r\n    \"ecommerce\",\r\n    \"core\",\r\n    \"drf_spectacular\",\r\n    \"django_filters\",\r\n    \"drf_yasg\",\r\n    ]\r\n\r\nMIDDLEWARE = [\r\n    \"django.middleware.security.SecurityMiddleware\",\r\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\r\n    \"django.middleware.common.CommonMiddleware\",\r\n    \"django.middleware.csrf.CsrfViewMiddleware\",\r\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\r\n    \"django.contrib.messages.middleware.MessageMiddleware\",\r\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\r\n]\r\n\r\nROOT_URLCONF = \"ecommerce.urls\"\r\n\r\nTEMPLATES = [\r\n    {\r\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\r\n        \"DIRS\": [],\r\n        \"APP_DIRS\": True,\r\n        \"OPTIONS\": {\r\n            \"context_processors\": [\r\n                \"django.template.context_processors.request\",\r\n                \"django.contrib.auth.context_processors.auth\",\r\n                \"django.contrib.messages.context_processors.messages\",\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = \"ecommerce.wsgi.application\"\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    \"default\": {\r\n        \"ENGINE\": \"django.db.backends.sqlite3\",\r\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\r\n    }\r\n}\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\r\n    },\r\n    {\r\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\r\n    },\r\n    {\r\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\r\n    },\r\n    {\r\n        \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/5.2/topics/i18n/\r\n\r\nLANGUAGE_CODE = \"en-us\"\r\n\r\nTIME_ZONE = \"UTC\"\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\r\n\r\nSTATIC_URL = \"static/\"\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\r\n\r\nAUTH_USER_MODEL = \"accounts.User\"\r\n\r\n\r\nAUTH_USER_MODEL = \"accounts.User\"\r\n\r\nREST_FRAMEWORK = {\r\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\r\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\r\n    ),\r\n    \"DEFAULT_SCHEMA_CLASS\": \"drf_spectacular.openapi.AutoSchema\",\r\n    \"DEFAULT_RENDERER_CLASSES\": [\r\n        \"rest_framework.renderers.JSONRenderer\",\r\n        \"rest_framework.renderers.BrowsableAPIRenderer\",  # اضافه کردن Browsable API\r\n    ],\r\n    'DEFAULT_FILTER_BACKENDS': [\r\n        'django_filters.rest_framework.DjangoFilterBackend',\r\n        'rest_framework.filters.SearchFilter',\r\n        'rest_framework.filters.OrderingFilter',\r\n    ],\r\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\r\n    'PAGE_SIZE': 10,\r\n}\r\n\r\nSIMPLE_JWT = {\r\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=60),\r\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),\r\n}\r\n\r\nSPECTACULAR_SETTINGS = {\r\n    'TITLE': 'shop-project',\r\n    'DESCRIPTION': 'مستندات کامل API پروژه فروشگاه',\r\n    'VERSION': '1.0.0',\r\n    'SERVE_INCLUDE_SCHEMA': False,\r\n    'COMPONENT_SPLIT_REQUEST': True,  # درخواست و پاسخ جدا نمایش داده شود\r\n    'SCHEMA_PATH_PREFIX': '/api/v[0-9]',  # در صورت وجود نسخه\u200Cبندی\r\n    # سایر تنظیمات...\r\n    'SORT_OPERATION_PARAMETERS': True,  # مرتب\u200Cسازی پارامترهای هر عملیات\r\n    'SORT_OPERATIONS': True,  # مرتب\u200Cسازی خود عملیات\u200Cها\r\n    'SORT_PATHS': True,  # مرتب\u200Cسازی مسیرهای URL\r\n    # 'TAGS': [\r\n    #     {'name': 'Users', 'description': 'عملیات مربوط به کاربران'},\r\n    #     {'name': 'Auth', 'description': 'احراز هویت و توکن'},\r\n    #     {'name': 'Addresses', 'description': 'مدیریت آدرس\u200Cها'},\r\n    #     {'name': 'Products', 'description': 'محصولات'},\r\n    #     {'name': 'Ratings', 'description': 'امتیازدهی به محصولات'},\r\n    # ],\r\n}\r\n#\r\n# REST_FRAMEWORK = {\r\n#     'DEFAULT_RENDERER_CLASSES': [\r\n#         'rest_framework.renderers.JSONRenderer',\r\n#         'rest_framework.renderers.BrowsableAPIRenderer',\r\n#     ]\r\n# }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/ecommerce/settings.py b/ecommerce/ecommerce/settings.py
--- a/ecommerce/ecommerce/settings.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/ecommerce/settings.py	(date 1749302017700)
@@ -9,6 +9,7 @@
 For the full list of settings and their values, see
 https://docs.djangoproject.com/en/5.2/ref/settings/
 """
+
 from email.policy import default
 from pathlib import Path
 from datetime import timedelta
@@ -22,7 +23,7 @@
 # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
 
 # SECURITY WARNING: keep the secret key used in production secret!
-SECRET_KEY = 'django-insecure-REPLACE_THIS_WITH_A_REAL_SECRET_KEY'
+SECRET_KEY = "django-insecure-REPLACE_THIS_WITH_A_REAL_SECRET_KEY"
 DEBUG = True
 
 # SECURITY WARNING: don't run with debug turned on in production!
@@ -49,7 +50,7 @@
     "drf_spectacular",
     "django_filters",
     "drf_yasg",
-    ]
+]
 
 MIDDLEWARE = [
     "django.middleware.security.SecurityMiddleware",
@@ -85,11 +86,16 @@
 # https://docs.djangoproject.com/en/5.2/ref/settings/#databases
 
 DATABASES = {
-    "default": {
-        "ENGINE": "django.db.backends.sqlite3",
-        "NAME": BASE_DIR / "db.sqlite3",
+    'default': {
+        'ENGINE': 'django.db.backends.postgresql',
+        'NAME': 'django_db',
+        'USER': 'farzam',
+        'PASSWORD': '1111',
+        'HOST': 'localhost',
+        'PORT': '5432',
     }
 }
+
 AUTH_PASSWORD_VALIDATORS = [
     {
         "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
@@ -142,13 +148,13 @@
         "rest_framework.renderers.JSONRenderer",
         "rest_framework.renderers.BrowsableAPIRenderer",  # اضافه کردن Browsable API
     ],
-    'DEFAULT_FILTER_BACKENDS': [
-        'django_filters.rest_framework.DjangoFilterBackend',
-        'rest_framework.filters.SearchFilter',
-        'rest_framework.filters.OrderingFilter',
+    "DEFAULT_FILTER_BACKENDS": [
+        "django_filters.rest_framework.DjangoFilterBackend",
+        "rest_framework.filters.SearchFilter",
+        "rest_framework.filters.OrderingFilter",
     ],
-    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
-    'PAGE_SIZE': 10,
+    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
+    "PAGE_SIZE": 10,
 }
 
 SIMPLE_JWT = {
@@ -157,16 +163,16 @@
 }
 
 SPECTACULAR_SETTINGS = {
-    'TITLE': 'shop-project',
-    'DESCRIPTION': 'مستندات کامل API پروژه فروشگاه',
-    'VERSION': '1.0.0',
-    'SERVE_INCLUDE_SCHEMA': False,
-    'COMPONENT_SPLIT_REQUEST': True,  # درخواست و پاسخ جدا نمایش داده شود
-    'SCHEMA_PATH_PREFIX': '/api/v[0-9]',  # در صورت وجود نسخه‌بندی
+    "TITLE": "shop-project",
+    "DESCRIPTION": "مستندات کامل API پروژه فروشگاه",
+    "VERSION": "1.0.0",
+    "SERVE_INCLUDE_SCHEMA": False,
+    "COMPONENT_SPLIT_REQUEST": True,  # درخواست و پاسخ جدا نمایش داده شود
+    "SCHEMA_PATH_PREFIX": "/api/v[0-9]",  # در صورت وجود نسخه‌بندی
     # سایر تنظیمات...
-    'SORT_OPERATION_PARAMETERS': True,  # مرتب‌سازی پارامترهای هر عملیات
-    'SORT_OPERATIONS': True,  # مرتب‌سازی خود عملیات‌ها
-    'SORT_PATHS': True,  # مرتب‌سازی مسیرهای URL
+    "SORT_OPERATION_PARAMETERS": True,  # مرتب‌سازی پارامترهای هر عملیات
+    "SORT_OPERATIONS": True,  # مرتب‌سازی خود عملیات‌ها
+    "SORT_PATHS": True,  # مرتب‌سازی مسیرهای URL
     # 'TAGS': [
     #     {'name': 'Users', 'description': 'عملیات مربوط به کاربران'},
     #     {'name': 'Auth', 'description': 'احراز هویت و توکن'},
Index: ecommerce/catalog/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import get_object_or_404\r\nfrom rest_framework.permissions import IsAuthenticated, IsAdminUser\r\nfrom rest_framework.response import Response\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework import status\r\nfrom .models import Category, Product, Shop, Wishlist\r\nfrom .serializers import (\r\n    CategorySerializer,\r\n    ProductSerializer,\r\n    ShopSerializer,\r\n    WishListSerializer,\r\n)\r\nfrom accounts.views import get_current_user_from_token\r\nfrom core.permissions import *\r\nfrom rest_framework.generics import ListAPIView\r\nfrom drf_spectacular.utils import extend_schema\r\nfrom django_filters.rest_framework import DjangoFilterBackend\r\nfrom rest_framework.filters import OrderingFilter, SearchFilter\r\n\r\n@extend_schema(tags=[\"products\"])\r\nclass ProductList(ListAPIView):\r\n    \"\"\"\r\n    list all products\r\n    \"\"\"\r\n\r\n    serializer_class = ProductSerializer\r\n    permission_classes = [IsAuthenticated]\r\n    queryset = Product.objects.all()\r\n\r\n    filter_backends = [DjangoFilterBackend, OrderingFilter, SearchFilter]\r\n\r\n    search_fields = [ 'description','name']\r\n\r\n    ordering_fields = [\"created_at\", \"updated_at\"]\r\n\r\n    filterset_fields = [\"category\", \"is_active\", \"created_at\", \"updated_at\"]\r\n\r\n\r\n@extend_schema(tags=[\"products\"])\r\nclass ProductDetail(APIView):\r\n    \"\"\"\r\n    detail single product\r\n    \"\"\"\r\n\r\n    serializer_class = ProductSerializer\r\n    permission_classes = [IsAuthenticated]\r\n\r\n    def get(self, request, pk):\r\n        queryset = get_object_or_404(Product, pk=pk)\r\n        srz_data = self.serializer_class(queryset)\r\n        return Response(srz_data.data)\r\n\r\n\r\n@extend_schema(tags=[\"products\"])\r\nclass ProductCreate(APIView):\r\n    \"\"\"\r\n    create new product\r\n    \"\"\"\r\n\r\n    permission_classes = [IsSellerOrAdmin]\r\n    serializer_class = ProductSerializer\r\n\r\n    def post(self, request):\r\n        srz_data = self.serializer_class(data=request.data)\r\n        if srz_data.is_valid():\r\n            srz_data.save()\r\n            return Response(srz_data.data, status=status.HTTP_201_CREATED)\r\n        return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@extend_schema(tags=[\"products\"])\r\nclass ProductUpdate(APIView):\r\n    \"\"\"\r\n    update single product\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = ProductSerializer\r\n\r\n    def put(self, request, pk):\r\n        queryset = get_object_or_404(Product, pk=pk)\r\n        self.check_object_permissions(request, queryset)\r\n        srz_data = self.serializer_class(queryset, data=request.data, partial=True)\r\n        if srz_data.is_valid():\r\n            srz_data.save()\r\n            return Response(srz_data.data, status=status.HTTP_200_OK)\r\n        return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@extend_schema(tags=[\"products\"])\r\nclass ProductDelete(APIView):\r\n    \"\"\"\r\n    delete single product\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = ProductSerializer\r\n\r\n    def delete(self, request, pk):\r\n        product = get_object_or_404(Product, pk=pk)\r\n        self.check_object_permissions(request, product)\r\n        product.is_active = False\r\n        product.save()\r\n        serializer = self.serializer_class(product)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n\r\n@extend_schema(tags=[\"shops\"])\r\nclass ShopList(ListAPIView):\r\n    \"\"\"\r\n    List all shops\r\n    \"\"\"\r\n\r\n    serializer_class = ShopSerializer\r\n    permission_classes = [IsAuthenticated]\r\n    queryset = Shop.objects.all()\r\n\r\n\r\n@extend_schema(tags=[\"shops\"])\r\nclass ShopDetail(APIView):\r\n    \"\"\"\r\n    detail single shop\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = ShopSerializer\r\n\r\n    def get(self, request, pk):\r\n        shop = get_object_or_404(Shop, pk=pk)\r\n        self.check_object_permissions(request, shop)\r\n        srz_data = self.serializer_class(shop)\r\n        return Response(srz_data.data)\r\n\r\n\r\n@extend_schema(tags=[\"shops\"])\r\nclass ShopCreate(APIView):\r\n    \"\"\"\r\n    create new shop\r\n    \"\"\"\r\n\r\n    permission_classes = [IsSellerOrAdmin]\r\n    serializer_class = ShopSerializer\r\n\r\n    def post(self, request):\r\n        current_user = get_current_user_from_token(request)\r\n        self.check_object_permissions(request, request)\r\n        srz_data = self.serializer_class(data=request.data)\r\n        if srz_data.is_valid():\r\n            srz_data.save(owner=current_user)\r\n            return Response(srz_data.data, status=status.HTTP_201_CREATED)\r\n        return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@extend_schema(tags=[\"shops\"])\r\nclass ShopUpdate(APIView):\r\n    \"\"\"\r\n    update single shop\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = ShopSerializer\r\n\r\n    def put(self, request, pk):\r\n        queryset = get_object_or_404(Shop, pk=pk)\r\n        self.check_object_permissions(request, queryset)\r\n        srz_data = self.serializer_class(queryset, data=request.data, partial=True)\r\n        if srz_data.is_valid():\r\n            srz_data.save()\r\n            return Response(srz_data.data, status=status.HTTP_200_OK)\r\n        return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@extend_schema(tags=[\"shops\"])\r\nclass ShopDelete(APIView):\r\n    \"\"\"\r\n    delete single shop\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = ShopSerializer\r\n\r\n    def delete(self, request, pk):\r\n        shop = get_object_or_404(Shop, pk=pk)\r\n        self.check_object_permissions(request, shop)\r\n        shop.is_active = False\r\n        shop.save()\r\n        serializer = self.serializer_class(shop)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n\r\n@extend_schema(tags=[\"categories\"])\r\nclass CategoryList(APIView):\r\n    \"\"\"\r\n    list all categories\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = CategorySerializer\r\n\r\n    def get(self, request):\r\n        queryset = Category.objects.all()\r\n        self.check_object_permissions(request, queryset)\r\n        srz_data = CategorySerializer(queryset, many=True)\r\n        return Response(srz_data.data)\r\n\r\n\r\n@extend_schema(tags=[\"categories\"])\r\nclass CategoryDetail(APIView):\r\n    \"\"\"\r\n    detail single category\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = CategorySerializer\r\n\r\n    def get(self, request, pk):\r\n        category = get_object_or_404(Category, pk=pk)\r\n        srz_data = self.serializer_class(category)\r\n        return Response(srz_data.data)\r\n\r\n\r\n@extend_schema(tags=[\"categories\"])\r\nclass CategoryCreate(APIView):\r\n    \"\"\"\r\n    create new category\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAdminUser]\r\n    serializer_class = CategorySerializer\r\n\r\n    def post(self, request):\r\n        srz_data = self.serializer_class(data=request.data)\r\n        if srz_data.is_valid():\r\n            srz_data.save()\r\n            return Response(srz_data.data, status=status.HTTP_201_CREATED)\r\n        return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@extend_schema(tags=[\"categories\"])\r\nclass CategoryUpdate(APIView):\r\n    \"\"\"\r\n    update single category\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAdminUser]\r\n    serializer_class = CategorySerializer\r\n\r\n    def put(self, request, pk):\r\n        queryset = get_object_or_404(Category, pk=pk)\r\n        srz_data = self.serializer_class(queryset, data=request.data, partial=True)\r\n        if srz_data.is_valid():\r\n            srz_data.save()\r\n            return Response(srz_data.data, status=status.HTTP_200_OK)\r\n        return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@extend_schema(tags=[\"categories\"])\r\nclass CategoryDelete(APIView):\r\n    \"\"\"\r\n    delete single category\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAdminUser]\r\n    serializer_class = CategorySerializer\r\n\r\n    def delete(self, request, pk):\r\n        category = get_object_or_404(Category, pk=pk)\r\n        category.is_active = False\r\n        category.save()\r\n        serializer = self.serializer_class(category)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n@extend_schema(tags=[\"wishlist\"])\r\nclass WishlistList(APIView):\r\n    \"\"\"\r\n    list all wishlist\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = WishListSerializer\r\n\r\n    def get(self, request):\r\n        queryset = Wishlist.objects.all()\r\n        srz_data = self.serializer_class(queryset, many=True)\r\n        return Response(srz_data.data)\r\n\r\n\r\n@extend_schema(tags=[\"wishlist\"])\r\nclass WishlistCreate(APIView):\r\n    \"\"\"\r\n    Create new wishlist\r\n    \"\"\"\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = WishListSerializer\r\n\r\n    def post(self, request):\r\n        current_user = get_current_user_from_token(request)\r\n        queryset = self.serializer_class(data=request.data)\r\n        self.check_object_permissions(request, queryset)\r\n\r\n        if queryset.is_valid():\r\n            product_id = queryset.validated_data.get(\"product\").id\r\n\r\n            # بررسی وجود قبلی\r\n            if Wishlist.objects.filter(user=current_user, product_id=product_id).exists():\r\n                return Response(\r\n                    {\"detail\": \"این محصول قبلاً به علاقه\u200Cمندی\u200Cها اضافه شده است.\"},\r\n                    status=status.HTTP_400_BAD_REQUEST\r\n                )\r\n\r\n            # ذخیره\u200Cسازی در صورت عدم وجود\r\n            queryset.save(user=current_user)\r\n            return Response(queryset.data, status=status.HTTP_201_CREATED)\r\n\r\n        return Response(queryset.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\nclass WishListDetail(APIView):\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = WishListSerializer\r\n\r\n    def get(self, request, pk):\r\n        wishlist = get_object_or_404(Wishlist, pk=pk)\r\n        srz_data = self.serializer_class(wishlist)\r\n        return Response(srz_data.data)\r\n\r\n\r\n\r\n@extend_schema(tags=[\"wishlist\"])\r\nclass WishlistDelete(APIView):\r\n    \"\"\"\r\n    delete wishlist\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = WishListSerializer\r\n\r\n    def delete(self, request, pk):\r\n        wishlist = get_object_or_404(Wishlist, pk=pk)\r\n        self.check_object_permissions(request, wishlist)\r\n        wishlist.is_active = False\r\n        wishlist.save()\r\n        serializer = self.serializer_class(wishlist)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/catalog/views.py b/ecommerce/catalog/views.py
--- a/ecommerce/catalog/views.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/catalog/views.py	(date 1748963536358)
@@ -16,12 +16,10 @@
 from drf_spectacular.utils import extend_schema
 from django_filters.rest_framework import DjangoFilterBackend
 from rest_framework.filters import OrderingFilter, SearchFilter
+from drf_spectacular.utils import extend_schema, OpenApiExample, OpenApiResponse
 
-@extend_schema(tags=["products"])
+
 class ProductList(ListAPIView):
-    """
-    list all products
-    """
 
     serializer_class = ProductSerializer
     permission_classes = [IsAuthenticated]
@@ -29,7 +27,7 @@
 
     filter_backends = [DjangoFilterBackend, OrderingFilter, SearchFilter]
 
-    search_fields = [ 'description','name']
+    search_fields = ["description", "name"]
 
     ordering_fields = ["created_at", "updated_at"]
 
@@ -71,7 +69,7 @@
 @extend_schema(tags=["products"])
 class ProductUpdate(APIView):
     """
-    update single product
+    Update single product
     """
 
     permission_classes = [IsOwnerOrAdmin]
@@ -135,7 +133,7 @@
 @extend_schema(tags=["shops"])
 class ShopCreate(APIView):
     """
-    create new shop
+    create shop
     """
 
     permission_classes = [IsSellerOrAdmin]
@@ -270,6 +268,7 @@
         serializer = self.serializer_class(category)
         return Response(serializer.data, status=status.HTTP_200_OK)
 
+
 @extend_schema(tags=["wishlist"])
 class WishlistList(APIView):
     """
@@ -290,6 +289,7 @@
     """
     Create new wishlist
     """
+
     permission_classes = [IsAuthenticated]
     serializer_class = WishListSerializer
 
@@ -302,10 +302,12 @@
             product_id = queryset.validated_data.get("product").id
 
             # بررسی وجود قبلی
-            if Wishlist.objects.filter(user=current_user, product_id=product_id).exists():
+            if Wishlist.objects.filter(
+                user=current_user, product_id=product_id
+            ).exists():
                 return Response(
                     {"detail": "این محصول قبلاً به علاقه‌مندی‌ها اضافه شده است."},
-                    status=status.HTTP_400_BAD_REQUEST
+                    status=status.HTTP_400_BAD_REQUEST,
                 )
 
             # ذخیره‌سازی در صورت عدم وجود
@@ -314,6 +316,7 @@
 
         return Response(queryset.errors, status=status.HTTP_400_BAD_REQUEST)
 
+
 class WishListDetail(APIView):
 
     permission_classes = [IsAuthenticated]
@@ -325,7 +328,6 @@
         return Response(srz_data.data)
 
 
-
 @extend_schema(tags=["wishlist"])
 class WishlistDelete(APIView):
     """
Index: ecommerce/catalog/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\r\nfrom accounts.serializers import UserSerializer,AddressSerializer\r\nfrom accounts.models import Address, User\r\nfrom accounts.serializers import UserSerializer\r\nfrom .models import Product, Category, Shop, Wishlist\r\n\r\n\r\nclass CategorySerializer(serializers.ModelSerializer):\r\n    # parent = serializers.SerializerMethodField()\r\n    class Meta:\r\n        model = Category\r\n        fields = [\"id\", \"name\", \"parent\"]\r\n\r\n    def to_representation(self, instance):\r\n        rep= super().to_representation(instance)\r\n\r\n        if instance.parent:\r\n            rep[\"parent\"] = {\r\n                'id': instance.parent.id,\r\n                'name': instance.parent.name\r\n            }\r\n        # if instance.user:\r\n        #     rep[\"user\"] = {\r\n        #         'id': instance.user.id,\r\n        #         'name': instance.user.username\r\n        #\r\n        #     }\r\n        return rep\r\n\r\n\r\nclass ShopSerializer(serializers.ModelSerializer):\r\n    owner=UserSerializer(read_only=True)\r\n    address =serializers.PrimaryKeyRelatedField(queryset=Address.objects.all())\r\n\r\n    class Meta:\r\n        model = Shop\r\n        fields = [\"id\", \"name\", \"owner\", \"address\", \"status\", \"is_active\"]\r\n        extra_kwargs = {\"owner\": {\"read_only\": True}}\r\n\r\n    def to_representation(self, instance):\r\n        rep = super().to_representation(instance)\r\n\r\n        if instance.address:\r\n            rep[\"address\"] = AddressSerializer(instance.address).data\r\n        return rep\r\n\r\n\r\nclass ProductSerializer(serializers.ModelSerializer):\r\n    shop = serializers.PrimaryKeyRelatedField(queryset=Shop.objects.all())\r\n    category = serializers.PrimaryKeyRelatedField(queryset=Category.objects.all())\r\n\r\n    class Meta:\r\n        model = Product\r\n        fields = [\r\n            \"id\",\r\n            \"name\",\r\n            \"description\",\r\n            \"price\",\r\n            \"category\",\r\n            \"shop\",\r\n            \"is_active\",\r\n            \"image_url\",\r\n        ]\r\n        extra_kwargs = {\"is_active\": {\"read_only\": True}}\r\n\r\n    def to_representation(self, instance):\r\n        rep = super().to_representation(instance)\r\n        rep[\"shop\"] = ShopSerializer(instance.shop).data\r\n        rep[\"category\"] = CategorySerializer(instance.category).data\r\n        return rep\r\n\r\n\r\n\r\n\r\nclass WishListSerializer(serializers.ModelSerializer):\r\n    product = serializers.PrimaryKeyRelatedField(queryset=Product.objects.all())\r\n    class Meta:\r\n        model = Wishlist\r\n        fields = [\r\n            \"id\",\r\n            \"user\",\r\n            \"product\",\r\n            \"is_active\",\r\n            \"created_at\",\r\n            \"updated_at\",\r\n        ]\r\n        extra_kwargs = {\"user\": {\"read_only\": True},\"created_at\": {\"read_only\": True},\"updated_at\": {\"read_only\": True}}\r\n    def to_representation(self, instance):\r\n        rep = super().to_representation(instance)\r\n        rep[\"user\"] = UserSerializer(instance.user).data\r\n        rep[\"product\"] = ProductSerializer(instance.product).data\r\n        return rep\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/catalog/serializers.py b/ecommerce/catalog/serializers.py
--- a/ecommerce/catalog/serializers.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/catalog/serializers.py	(date 1748963536228)
@@ -1,5 +1,5 @@
 from rest_framework import serializers
-from accounts.serializers import UserSerializer,AddressSerializer
+from accounts.serializers import UserSerializer, AddressSerializer
 from accounts.models import Address, User
 from accounts.serializers import UserSerializer
 from .models import Product, Category, Shop, Wishlist
@@ -12,13 +12,10 @@
         fields = ["id", "name", "parent"]
 
     def to_representation(self, instance):
-        rep= super().to_representation(instance)
+        rep = super().to_representation(instance)
 
         if instance.parent:
-            rep["parent"] = {
-                'id': instance.parent.id,
-                'name': instance.parent.name
-            }
+            rep["parent"] = {"id": instance.parent.id, "name": instance.parent.name}
         # if instance.user:
         #     rep["user"] = {
         #         'id': instance.user.id,
@@ -29,8 +26,8 @@
 
 
 class ShopSerializer(serializers.ModelSerializer):
-    owner=UserSerializer(read_only=True)
-    address =serializers.PrimaryKeyRelatedField(queryset=Address.objects.all())
+    owner = UserSerializer(read_only=True)
+    address = serializers.PrimaryKeyRelatedField(queryset=Address.objects.all())
 
     class Meta:
         model = Shop
@@ -70,10 +67,9 @@
         return rep
 
 
-
-
 class WishListSerializer(serializers.ModelSerializer):
     product = serializers.PrimaryKeyRelatedField(queryset=Product.objects.all())
+
     class Meta:
         model = Wishlist
         fields = [
@@ -84,7 +80,12 @@
             "created_at",
             "updated_at",
         ]
-        extra_kwargs = {"user": {"read_only": True},"created_at": {"read_only": True},"updated_at": {"read_only": True}}
+        extra_kwargs = {
+            "user": {"read_only": True},
+            "created_at": {"read_only": True},
+            "updated_at": {"read_only": True},
+        }
+
     def to_representation(self, instance):
         rep = super().to_representation(instance)
         rep["user"] = UserSerializer(instance.user).data
Index: ecommerce/tests/catalog/test_catalog_models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom django.db import IntegrityError\r\nfrom catalog.models import *\r\nfrom tests.conftest import category\r\n\r\nUser = get_user_model()\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestCategoryModel:\r\n    \"\"\"test category model\"\"\"\r\n    #category with no parent\r\n    def test_create_category_no_parent(self,category):\r\n        category = category\r\n        assert category.name == \"lavazem electronici\"\r\n        assert category.parent is None\r\n    #category with parent\r\n    def test_create_category_parent(self,category):\r\n        parent = category\r\n        child = Category.objects.create(name = \"mobile\", parent=parent)\r\n        assert child.parent == parent\r\n        assert child.name == \"mobile\"\r\n        assert parent.name == \"lavazem electronici\"\r\n        assert parent.children.first() == child\r\n    #test category str\r\n    def test_category_str_method(self,category):\r\n        parent = category\r\n        child = Category.objects.create(name = \"mobile\", parent=parent)\r\n        sub_child = Category.objects.create(name = \"iphone\", parent=child)\r\n\r\n        assert str(sub_child) == \"lavazem electronici / mobile / iphone\"\r\n\r\n@pytest.mark.django_db\r\nclass TestShopModel:\r\n    \"\"\"test shop model\"\"\"\r\n\r\n    def test_create_shop(self,shop,regular_user,address):\r\n        shop = shop\r\n        assert shop.owner == regular_user\r\n        assert shop.name == \"test\"\r\n        assert shop.address == address\r\n        assert shop.status == \"PENDING\"\r\n        assert shop.is_active is True\r\n        assert shop.created_at is not None\r\n\r\n@pytest.mark.django_db\r\nclass TestProductModel:\r\n    \"\"\"test product model\"\"\"\r\n    def test_create_product_no_parent(self,shop,category,product):\r\n        product = product\r\n        assert product.shop == shop\r\n        assert product.category == category\r\n        assert product.name == \"test\"\r\n        assert product.description == \"test\"\r\n        assert product.price == 100\r\n        assert product.is_active is True\r\n\r\n@pytest.mark.django_db\r\nclass TestWishListModel:\r\n    \"\"\"test wishlist model\"\"\"\r\n    def test_create_wishlist(self,regular_user,product):\r\n        wishlist = Wishlist.objects.create(user = regular_user, product = product)\r\n        assert wishlist.user == regular_user\r\n        assert wishlist.product == product\r\n\r\n    def test_wishlist_unique_together(self, user, product):\r\n        Wishlist.objects.create(user=user, product=product)\r\n        with pytest.raises(IntegrityError):\r\n            Wishlist.objects.create(user=user, product=product)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/tests/catalog/test_catalog_models.py b/ecommerce/tests/catalog/test_catalog_models.py
--- a/ecommerce/tests/catalog/test_catalog_models.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/tests/catalog/test_catalog_models.py	(date 1748963536248)
@@ -9,32 +9,36 @@
 @pytest.mark.django_db
 class TestCategoryModel:
     """test category model"""
-    #category with no parent
-    def test_create_category_no_parent(self,category):
+
+    # category with no parent
+    def test_create_category_no_parent(self, category):
         category = category
         assert category.name == "lavazem electronici"
         assert category.parent is None
-    #category with parent
-    def test_create_category_parent(self,category):
+
+    # category with parent
+    def test_create_category_parent(self, category):
         parent = category
-        child = Category.objects.create(name = "mobile", parent=parent)
+        child = Category.objects.create(name="mobile", parent=parent)
         assert child.parent == parent
         assert child.name == "mobile"
         assert parent.name == "lavazem electronici"
         assert parent.children.first() == child
-    #test category str
-    def test_category_str_method(self,category):
+
+    # test category str
+    def test_category_str_method(self, category):
         parent = category
-        child = Category.objects.create(name = "mobile", parent=parent)
-        sub_child = Category.objects.create(name = "iphone", parent=child)
+        child = Category.objects.create(name="mobile", parent=parent)
+        sub_child = Category.objects.create(name="iphone", parent=child)
 
         assert str(sub_child) == "lavazem electronici / mobile / iphone"
 
+
 @pytest.mark.django_db
 class TestShopModel:
     """test shop model"""
 
-    def test_create_shop(self,shop,regular_user,address):
+    def test_create_shop(self, shop, regular_user, address):
         shop = shop
         assert shop.owner == regular_user
         assert shop.name == "test"
@@ -43,10 +47,12 @@
         assert shop.is_active is True
         assert shop.created_at is not None
 
+
 @pytest.mark.django_db
 class TestProductModel:
     """test product model"""
-    def test_create_product_no_parent(self,shop,category,product):
+
+    def test_create_product_no_parent(self, shop, category, product):
         product = product
         assert product.shop == shop
         assert product.category == category
@@ -55,15 +61,17 @@
         assert product.price == 100
         assert product.is_active is True
 
+
 @pytest.mark.django_db
 class TestWishListModel:
     """test wishlist model"""
-    def test_create_wishlist(self,regular_user,product):
-        wishlist = Wishlist.objects.create(user = regular_user, product = product)
+
+    def test_create_wishlist(self, regular_user, product):
+        wishlist = Wishlist.objects.create(user=regular_user, product=product)
         assert wishlist.user == regular_user
         assert wishlist.product == product
 
     def test_wishlist_unique_together(self, user, product):
         Wishlist.objects.create(user=user, product=product)
         with pytest.raises(IntegrityError):
-            Wishlist.objects.create(user=user, product=product)
\ No newline at end of file
+            Wishlist.objects.create(user=user, product=product)
Index: ecommerce/core/permissions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework.permissions import BasePermission\r\nfrom rest_framework import permissions\r\nfrom django.contrib.auth import get_user_model\r\n\r\nUser = get_user_model()\r\n\r\n\r\nclass IsSellerOrAdmin(BasePermission):\r\n    \"\"\"\r\n    فقط کاربران SELLER یا ادمین\u200Cها اجازه ایجاد فروشگاه دارند.\r\n    \"\"\"\r\n\r\n    def has_permission(self, request, view):\r\n        return request.user.is_authenticated and (\r\n            request.user.role == \"SELLER\"\r\n            or request.user.is_staff\r\n            or request.user.is_superuser\r\n        )\r\n\r\n\r\n# class IsOwnerOrAdmin(permissions.BasePermission):\r\n#     \"\"\"\r\n#     Object-level permission to only allow owners of an object to edit it.\r\n#     Assumes the model instance has an `owner` attribute.\r\n#     \"\"\"\r\n#\r\n#     def has_object_permission(self, request, view, obj):\r\n#         return obj.owner == request.user or request.user.is_staff\r\n\r\n\r\nclass IsOwnerOrReadOnly(permissions.BasePermission):\r\n    \"\"\"\r\n    Only allow object owner to edit; anyone can read.\r\n    \"\"\"\r\n\r\n    def has_object_permission(self, request, view, obj):\r\n        if request.method in permissions.SAFE_METHODS:\r\n            return True\r\n        return obj.owner == request.user\r\n\r\n\r\nclass IsOwnerOrAdmin(BasePermission):\r\n    \"\"\"\r\n    اجازه فقط برای ادمین یا صاحب آبجکت.\r\n    \"\"\"\r\n\r\n    def has_object_permission(self, request, view, obj):\r\n        if request.user.is_staff or request.user.is_superuser:\r\n            return True\r\n\r\n        user = self._extract_user(obj)\r\n        return user == request.user\r\n\r\n    def _extract_user(self, obj):\r\n        \"\"\"\r\n        استخراج کاربر از آبجکت یا آبجکت\u200Cهای مرتبط.\r\n        \"\"\"\r\n        # اگر خود obj از جنس User باشه\r\n        if isinstance(obj, User):\r\n            return obj\r\n\r\n        # حالت مستقیم\r\n        for attr in [\"user\", \"owner\"]:\r\n            if hasattr(obj, attr):\r\n                return getattr(obj, attr)\r\n\r\n        # حالت غیرمستقیم\r\n        for relation in [\"order\", \"shop\", \"product\"]:\r\n            related_obj = getattr(obj, relation, None)\r\n            if related_obj:\r\n                for attr in [\"user\", \"owner\"]:\r\n                    if hasattr(related_obj, attr):\r\n                        return getattr(related_obj, attr)\r\n\r\n        return None\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/core/permissions.py b/ecommerce/core/permissions.py
--- a/ecommerce/core/permissions.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/core/permissions.py	(date 1749054289934)
@@ -30,7 +30,7 @@
 
 class IsOwnerOrReadOnly(permissions.BasePermission):
     """
-    Only allow object owner to edit; anyone can read.
+    Only allow owners to edit; anyone can read.
     """
 
     def has_object_permission(self, request, view, obj):
Index: ecommerce/tests/conftest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom _pytest.nodes import Item\r\nfrom drf_yasg.openapi import Items\r\nfrom rest_framework.test import APIClient\r\nfrom rest_framework_simplejwt.tokens import AccessToken\r\nfrom accounts.models import User,Address,City,Country\r\nfrom catalog.models import Shop, Category, Product\r\nfrom orders.models import Order, OrderItem, Delivery\r\nfrom interactions.models import Comment\r\n\r\n# CREATING TEST MODELS FOR ALL AF THE MODELS IN FIXTURE\r\n\r\n@pytest.fixture\r\ndef user(db):\r\n    return User.objects.create_user(\r\n        username='testuser',\r\n        email='test@test.com',\r\n        password='test1234/',\r\n        phone='1231535',\r\n    )\r\n\r\n@pytest.fixture\r\ndef country(db):\r\n    return Country.objects.create(name=\"iran\")\r\n\r\n@pytest.fixture\r\ndef city(db,country):\r\n    return City.objects.create(\r\n        name=\"test\",\r\n        country=country,\r\n    )\r\n\r\n@pytest.fixture\r\ndef address(db,regular_user,city):\r\n    return Address.objects.create(\r\n        user=regular_user,\r\n        city=city,\r\n        street=\"test\",\r\n        zip_code=\"123456\",\r\n    )\r\n\r\n@pytest.fixture\r\ndef shop(db,regular_user,address):\r\n\r\n    return Shop.objects.create(\r\n        status=\"PENDING\",\r\n        owner=regular_user,\r\n        name=\"test\",\r\n        address=address,\r\n        is_active=True,\r\n    )\r\n@pytest.fixture\r\ndef category(db):\r\n    return Category.objects.create(name=\"lavazem electronici\")\r\n\r\n@pytest.fixture\r\ndef product(db,shop,category):\r\n    return Product.objects.create(\r\n        shop=shop,\r\n        category=category,\r\n        name=\"test\",\r\n        description=\"test\",\r\n        price=100,\r\n        is_active=True,\r\n    )\r\n\r\n@pytest.fixture\r\ndef order(db,shop,user,address,regular_user):\r\n    return Order.objects.create(\r\n        shop=shop,\r\n        user=regular_user,\r\n        address=address,\r\n        total_price=100,\r\n    )\r\n\r\n@pytest.fixture\r\ndef delivery(order):\r\n    return Delivery.objects.create(\r\n        order=order,\r\n        method = \"TPOX\"\r\n    )\r\n\r\n\r\n\r\n\r\n\r\n@pytest.fixture\r\ndef comment(product,regular_user):\r\n    return Comment.objects.create(\r\n        product=product,\r\n        text= \"this is a comment test\",\r\n        user = regular_user,\r\n    )\r\n\r\n@pytest.fixture\r\ndef api_client():\r\n    client = APIClient()\r\n    return client\r\n\r\n# CREATING TEST USERS [ADMIN USER, REGULAR USER , ANOTHER USER]\r\n\r\n@pytest.fixture\r\ndef admin_user(django_user_model):\r\n    return django_user_model.objects.create_user(\r\n        username=\"root\",\r\n        email=\"rooot@gmail.com\",\r\n        password=\"root1234/\",\r\n        phone=\"123153533\",\r\n        is_staff=True,\r\n        is_superuser=True\r\n    )\r\n\r\n@pytest.fixture\r\ndef regular_user(django_user_model):\r\n    return django_user_model.objects.create_user(\r\n        username=\"user\",\r\n        email=\"user@test.com\",\r\n        password=\"userpass123\",  # ← اصلاح این خط\r\n        phone=\"1231535444\"\r\n    )\r\n\r\n@pytest.fixture\r\ndef another_user(django_user_model):\r\n    return User.objects.create_user(\r\n        email='another@example.com',\r\n        username='anotheruser',\r\n        password='anotherpass123',\r\n        phone='123153544124',\r\n        is_staff=False,\r\n        is_superuser=False\r\n    )\r\n@pytest.fixture\r\ndef seller_user():\r\n    return User.objects.create_user(\r\n        username=\"selleruser\",\r\n        email=\"seller@test.com\",\r\n        password=\"sellerpass123\",\r\n        phone=\"09121234567\",\r\n        role=\"SELLER\",  # فرض بر اینکه فیلد نقش (role) دارید\r\n    )\r\n\r\n@pytest.fixture\r\ndef seller2_user():\r\n    return User.objects.create_user(\r\n        username=\"user2\",\r\n        email=\"user2@test.com\",\r\n        password=\"userpass123\",\r\n        phone=\"12315351251\",\r\n        role = \"SELLER\",\r\n    )\r\n\r\n@pytest.fixture\r\ndef owner_user():\r\n    return User.objects.create_user(\r\n        email='another@example.com',\r\n        username='anotheruser',\r\n        password='anotherpass123',\r\n        phone='12535441214',\r\n        is_staff=False,\r\n        is_superuser=False\r\n    )\r\n# CREATING TEST TOKENS [ADMIN TOKEN, REGULAR USER TOKEN, ANOTHER USER TOKEN]\r\n\r\n@pytest.fixture\r\ndef token_admin_client(admin_user):\r\n    client = APIClient()\r\n    token = AccessToken.for_user(admin_user)\r\n    client.credentials(HTTP_AUTHORIZATION=f\"Bearer {token}\")\r\n    return client\r\n\r\n@pytest.fixture\r\ndef token_regular_user_client(regular_user):\r\n    client = APIClient()\r\n    token = AccessToken.for_user(regular_user)\r\n    client.credentials(HTTP_AUTHORIZATION=f\"Bearer {token}\")\r\n    return client\r\n\r\n@pytest.fixture\r\ndef token_another_user_client(another_user):\r\n    client = APIClient()\r\n    token = AccessToken.for_user(another_user)\r\n    client.credentials(HTTP_AUTHORIZATION=f\"Bearer {token}\")\r\n    return client\r\n\r\n@pytest.fixture\r\ndef token_seller_user_client(seller_user):\r\n    client = APIClient()\r\n    token = AccessToken.for_user(seller_user)\r\n    client.credentials(HTTP_AUTHORIZATION=f\"Bearer {token}\")\r\n    return client\r\n\r\n@pytest.fixture\r\ndef token_seller2_user_client(seller2_user):\r\n    client = APIClient()\r\n    token = AccessToken.for_user(seller2_user)\r\n    client.credentials(HTTP_AUTHORIZATION=f\"Bearer {token}\")\r\n    return client\r\n\r\n\r\n\r\n@pytest.fixture\r\ndef address_regular_user(db,regular_user,city):\r\n    return Address.objects.create(\r\n        user=regular_user,\r\n        city=city,\r\n        street=\"test\",\r\n        zip_code=\"123456\",\r\n    )\r\n\r\n@pytest.fixture\r\ndef shop_seller_user(db,seller_user,address):\r\n    return Shop.objects.create(\r\n        status=\"PENDING\",\r\n        owner=seller_user,\r\n        name=\"test\",\r\n        address=address,\r\n        is_active=True,\r\n    )\r\n\r\n@pytest.fixture\r\ndef product_seller_user(seller_user,shop_seller_user,category):\r\n    return Product.objects.create(\r\n        shop=shop_seller_user,\r\n        category=category,\r\n        name=\"test\",\r\n        description=\"test\",\r\n        price=100,\r\n        is_active=True,\r\n    )\r\n\r\n@pytest.fixture\r\ndef items(product):\r\n    return OrderItem.objects.create(\r\n        product=product,\r\n        count = 2\r\n    )\r\n\r\n\r\n@pytest.fixture\r\ndef create_order(shop,address,items):\r\n    return Order.objects.create(\r\n        shop=shop.id,\r\n        address=address.id,\r\n        items=items.id,\r\n    )\r\n@pytest.fixture\r\ndef order_item(order, product):\r\n    return OrderItem.objects.create(order=order, product=product, count=2, row_price=product.price * 2)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/tests/conftest.py b/ecommerce/tests/conftest.py
--- a/ecommerce/tests/conftest.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/tests/conftest.py	(date 1748963536348)
@@ -3,35 +3,39 @@
 from drf_yasg.openapi import Items
 from rest_framework.test import APIClient
 from rest_framework_simplejwt.tokens import AccessToken
-from accounts.models import User,Address,City,Country
+from accounts.models import User, Address, City, Country
 from catalog.models import Shop, Category, Product
 from orders.models import Order, OrderItem, Delivery
 from interactions.models import Comment
 
 # CREATING TEST MODELS FOR ALL AF THE MODELS IN FIXTURE
 
+
 @pytest.fixture
 def user(db):
     return User.objects.create_user(
-        username='testuser',
-        email='test@test.com',
-        password='test1234/',
-        phone='1231535',
+        username="testuser",
+        email="test@test.com",
+        password="test1234/",
+        phone="1231535",
     )
+
 
 @pytest.fixture
 def country(db):
     return Country.objects.create(name="iran")
 
+
 @pytest.fixture
-def city(db,country):
+def city(db, country):
     return City.objects.create(
         name="test",
         country=country,
     )
 
+
 @pytest.fixture
-def address(db,regular_user,city):
+def address(db, regular_user, city):
     return Address.objects.create(
         user=regular_user,
         city=city,
@@ -39,8 +43,9 @@
         zip_code="123456",
     )
 
+
 @pytest.fixture
-def shop(db,regular_user,address):
+def shop(db, regular_user, address):
 
     return Shop.objects.create(
         status="PENDING",
@@ -49,12 +54,15 @@
         address=address,
         is_active=True,
     )
+
+
 @pytest.fixture
 def category(db):
     return Category.objects.create(name="lavazem electronici")
 
+
 @pytest.fixture
-def product(db,shop,category):
+def product(db, shop, category):
     return Product.objects.create(
         shop=shop,
         category=category,
@@ -64,8 +72,9 @@
         is_active=True,
     )
 
+
 @pytest.fixture
-def order(db,shop,user,address,regular_user):
+def order(db, shop, user, address, regular_user):
     return Order.objects.create(
         shop=shop,
         user=regular_user,
@@ -73,32 +82,30 @@
         total_price=100,
     )
 
+
 @pytest.fixture
 def delivery(order):
-    return Delivery.objects.create(
-        order=order,
-        method = "TPOX"
-    )
-
-
-
+    return Delivery.objects.create(order=order, method="TPOX")
 
 
 @pytest.fixture
-def comment(product,regular_user):
+def comment(product, regular_user):
     return Comment.objects.create(
         product=product,
-        text= "this is a comment test",
-        user = regular_user,
+        text="this is a comment test",
+        user=regular_user,
     )
 
+
 @pytest.fixture
 def api_client():
     client = APIClient()
     return client
 
+
 # CREATING TEST USERS [ADMIN USER, REGULAR USER , ANOTHER USER]
 
+
 @pytest.fixture
 def admin_user(django_user_model):
     return django_user_model.objects.create_user(
@@ -107,8 +114,9 @@
         password="root1234/",
         phone="123153533",
         is_staff=True,
-        is_superuser=True
+        is_superuser=True,
     )
+
 
 @pytest.fixture
 def regular_user(django_user_model):
@@ -116,19 +124,22 @@
         username="user",
         email="user@test.com",
         password="userpass123",  # ← اصلاح این خط
-        phone="1231535444"
+        phone="1231535444",
     )
+
 
 @pytest.fixture
 def another_user(django_user_model):
     return User.objects.create_user(
-        email='another@example.com',
-        username='anotheruser',
-        password='anotherpass123',
-        phone='123153544124',
+        email="another@example.com",
+        username="anotheruser",
+        password="anotherpass123",
+        phone="123153544124",
         is_staff=False,
-        is_superuser=False
+        is_superuser=False,
     )
+
+
 @pytest.fixture
 def seller_user():
     return User.objects.create_user(
@@ -139,6 +150,7 @@
         role="SELLER",  # فرض بر اینکه فیلد نقش (role) دارید
     )
 
+
 @pytest.fixture
 def seller2_user():
     return User.objects.create_user(
@@ -146,21 +158,25 @@
         email="user2@test.com",
         password="userpass123",
         phone="12315351251",
-        role = "SELLER",
+        role="SELLER",
     )
 
+
 @pytest.fixture
 def owner_user():
     return User.objects.create_user(
-        email='another@example.com',
-        username='anotheruser',
-        password='anotherpass123',
-        phone='12535441214',
+        email="another@example.com",
+        username="anotheruser",
+        password="anotherpass123",
+        phone="12535441214",
         is_staff=False,
-        is_superuser=False
+        is_superuser=False,
     )
+
+
 # CREATING TEST TOKENS [ADMIN TOKEN, REGULAR USER TOKEN, ANOTHER USER TOKEN]
 
+
 @pytest.fixture
 def token_admin_client(admin_user):
     client = APIClient()
@@ -168,6 +184,7 @@
     client.credentials(HTTP_AUTHORIZATION=f"Bearer {token}")
     return client
 
+
 @pytest.fixture
 def token_regular_user_client(regular_user):
     client = APIClient()
@@ -175,6 +192,7 @@
     client.credentials(HTTP_AUTHORIZATION=f"Bearer {token}")
     return client
 
+
 @pytest.fixture
 def token_another_user_client(another_user):
     client = APIClient()
@@ -182,6 +200,7 @@
     client.credentials(HTTP_AUTHORIZATION=f"Bearer {token}")
     return client
 
+
 @pytest.fixture
 def token_seller_user_client(seller_user):
     client = APIClient()
@@ -189,6 +208,7 @@
     client.credentials(HTTP_AUTHORIZATION=f"Bearer {token}")
     return client
 
+
 @pytest.fixture
 def token_seller2_user_client(seller2_user):
     client = APIClient()
@@ -197,9 +217,8 @@
     return client
 
 
-
 @pytest.fixture
-def address_regular_user(db,regular_user,city):
+def address_regular_user(db, regular_user, city):
     return Address.objects.create(
         user=regular_user,
         city=city,
@@ -207,8 +226,9 @@
         zip_code="123456",
     )
 
+
 @pytest.fixture
-def shop_seller_user(db,seller_user,address):
+def shop_seller_user(db, seller_user, address):
     return Shop.objects.create(
         status="PENDING",
         owner=seller_user,
@@ -217,8 +237,9 @@
         is_active=True,
     )
 
+
 @pytest.fixture
-def product_seller_user(seller_user,shop_seller_user,category):
+def product_seller_user(seller_user, shop_seller_user, category):
     return Product.objects.create(
         shop=shop_seller_user,
         category=category,
@@ -228,21 +249,23 @@
         is_active=True,
     )
 
+
 @pytest.fixture
 def items(product):
-    return OrderItem.objects.create(
-        product=product,
-        count = 2
-    )
+    return OrderItem.objects.create(product=product, count=2)
 
 
 @pytest.fixture
-def create_order(shop,address,items):
+def create_order(shop, address, items):
     return Order.objects.create(
         shop=shop.id,
         address=address.id,
         items=items.id,
     )
+
+
 @pytest.fixture
 def order_item(order, product):
-    return OrderItem.objects.create(order=order, product=product, count=2, row_price=product.price * 2)
+    return OrderItem.objects.create(
+        order=order, product=product, count=2, row_price=product.price * 2
+    )
Index: ecommerce/tests/orders/test_orders_models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom orders.models import OrderItem, Delivery\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestOrderModel:\r\n    \"\"\"\r\n    test orders model\r\n    \"\"\"\r\n\r\n    def test_order_create(self,order, shop,regular_user,address):\r\n        order = order\r\n        assert order.shop == shop\r\n        assert order.user == regular_user\r\n        assert order.address == address\r\n        assert order.total_price == 100\r\n\r\n@pytest.mark.django_db\r\nclass TestOrderItemModel:\r\n    \"\"\"\r\n    test orderitem model\r\n    \"\"\"\r\n\r\n    def test_order_item_create(self,order, product):\r\n        orderitem = OrderItem.objects.create(order=order, product=product, row_price=100,count=2)\r\n        assert orderitem.order == order\r\n        assert orderitem.product == product\r\n        assert orderitem.row_price == 100\r\n        assert orderitem.count == 2\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestDeliveryModel:\r\n    \"\"\"\r\n    test delivery model\r\n    \"\"\"\r\n    def test_delivery_create(self,order):\r\n        delivery = Delivery.objects.create(order=order,method= \"TPOX\")\r\n        assert delivery.method == \"TPOX\"\r\n        assert delivery.order == order\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/tests/orders/test_orders_models.py b/ecommerce/tests/orders/test_orders_models.py
--- a/ecommerce/tests/orders/test_orders_models.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/tests/orders/test_orders_models.py	(date 1748963536248)
@@ -8,21 +8,24 @@
     test orders model
     """
 
-    def test_order_create(self,order, shop,regular_user,address):
+    def test_order_create(self, order, shop, regular_user, address):
         order = order
         assert order.shop == shop
         assert order.user == regular_user
         assert order.address == address
         assert order.total_price == 100
 
+
 @pytest.mark.django_db
 class TestOrderItemModel:
     """
     test orderitem model
     """
 
-    def test_order_item_create(self,order, product):
-        orderitem = OrderItem.objects.create(order=order, product=product, row_price=100,count=2)
+    def test_order_item_create(self, order, product):
+        orderitem = OrderItem.objects.create(
+            order=order, product=product, row_price=100, count=2
+        )
         assert orderitem.order == order
         assert orderitem.product == product
         assert orderitem.row_price == 100
@@ -34,9 +37,8 @@
     """
     test delivery model
     """
-    def test_delivery_create(self,order):
-        delivery = Delivery.objects.create(order=order,method= "TPOX")
+
+    def test_delivery_create(self, order):
+        delivery = Delivery.objects.create(order=order, method="TPOX")
         assert delivery.method == "TPOX"
         assert delivery.order == order
-
-
Index: ecommerce/interactions/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from multiprocessing.resource_tracker import register\r\n\r\nfrom django.contrib import admin\r\nfrom .models import Rate\r\nadmin.site.register(Rate)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/interactions/admin.py b/ecommerce/interactions/admin.py
--- a/ecommerce/interactions/admin.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/interactions/admin.py	(date 1748963536168)
@@ -2,4 +2,5 @@
 
 from django.contrib import admin
 from .models import Rate
-admin.site.register(Rate)
\ No newline at end of file
+
+admin.site.register(Rate)
Index: ecommerce/tests/interactions/test_interactions_models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom django.db import IntegrityError\r\nfrom interactions.models import Rate,Comment\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestRateModel:\r\n    \"\"\"\r\n    test rate model\r\n    \"\"\"\r\n\r\n    def test_rate_create(self, user, product):\r\n        rate = Rate.objects.create(user = user, product = product,score=3)\r\n        assert rate.user == user\r\n        assert rate.product == product\r\n        assert rate.score == 3\r\n\r\n    #test unique\r\n    def test_unique_together_constraint(self, user, product):\r\n        Rate.objects.create(user=user, product=product, score=3)\r\n        with pytest.raises(IntegrityError):\r\n            Rate.objects.create(user=user, product=product, score=5)\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestCommentModel:\r\n    \"\"\"\r\n    test comment model\r\n    \"\"\"\r\n\r\n    def test_comment_create(self, user, product):\r\n        comment = Comment.objects.create(user = user, product = product, text = \"this is a test comment\")\r\n        assert comment.user == user\r\n        assert comment.product == product\r\n        assert comment.text == \"this is a test comment\"\r\n        assert comment.parent is None\r\n\r\n    #test replay\r\n    def test_create_replay_comment(self, user, product):\r\n        parent_comment = Comment.objects.create(\r\n            user = user,\r\n            product = product,\r\n            text = \"this is a test comment\"\r\n        )\r\n        replay_comment = Comment.objects.create(\r\n            user = user,\r\n            product = product,\r\n            text = \"this is a test comment\",\r\n            parent = parent_comment\r\n        )\r\n        assert replay_comment.parent == parent_comment\r\n        assert replay_comment in parent_comment.replies.all()\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/tests/interactions/test_interactions_models.py b/ecommerce/tests/interactions/test_interactions_models.py
--- a/ecommerce/tests/interactions/test_interactions_models.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/tests/interactions/test_interactions_models.py	(date 1748963536268)
@@ -1,6 +1,6 @@
 import pytest
 from django.db import IntegrityError
-from interactions.models import Rate,Comment
+from interactions.models import Rate, Comment
 
 
 @pytest.mark.django_db
@@ -10,12 +10,12 @@
     """
 
     def test_rate_create(self, user, product):
-        rate = Rate.objects.create(user = user, product = product,score=3)
+        rate = Rate.objects.create(user=user, product=product, score=3)
         assert rate.user == user
         assert rate.product == product
         assert rate.score == 3
 
-    #test unique
+    # test unique
     def test_unique_together_constraint(self, user, product):
         Rate.objects.create(user=user, product=product, score=3)
         with pytest.raises(IntegrityError):
@@ -29,26 +29,24 @@
     """
 
     def test_comment_create(self, user, product):
-        comment = Comment.objects.create(user = user, product = product, text = "this is a test comment")
+        comment = Comment.objects.create(
+            user=user, product=product, text="this is a test comment"
+        )
         assert comment.user == user
         assert comment.product == product
         assert comment.text == "this is a test comment"
         assert comment.parent is None
 
-    #test replay
+    # test replay
     def test_create_replay_comment(self, user, product):
         parent_comment = Comment.objects.create(
-            user = user,
-            product = product,
-            text = "this is a test comment"
+            user=user, product=product, text="this is a test comment"
         )
         replay_comment = Comment.objects.create(
-            user = user,
-            product = product,
-            text = "this is a test comment",
-            parent = parent_comment
+            user=user,
+            product=product,
+            text="this is a test comment",
+            parent=parent_comment,
         )
         assert replay_comment.parent == parent_comment
         assert replay_comment in parent_comment.replies.all()
-
-
Index: ecommerce/tests/orders/test_orders_views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom django.urls import reverse\r\nfrom rest_framework import status\r\nfrom decimal import Decimal\r\nfrom tests.conftest import address\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestOrderListViews:\r\n    \"\"\"test order list \"\"\"\r\n    @pytest.fixture\r\n    def order_list_url(self):\r\n        return reverse('orders:order-list')\r\n\r\n    #test admin just can see all of order_list\r\n    def test_admin_can_see_orders_list(self,token_admin_client,order_list_url, order):\r\n        response = token_admin_client.get(order_list_url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_cannot_list_orders(self, client, order_list_url):\r\n        response = client.get(order_list_url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n    #test authenticate user cant\r\n    def test_authenticated_user_cannot_see_others_order(self,token_another_user_client,order_list_url,order):\r\n        response = token_another_user_client.get(order_list_url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestOrderDetailViews:\r\n    \"\"\"\r\n    test order detail\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def order_detail_url(self,order):\r\n        return reverse('orders:order-detail', kwargs={'pk':order.id})\r\n\r\n    #test admin user can see order detail\r\n    def test_admin_can_see_order_details(self,token_regular_user_client,order_detail_url,order):\r\n        response = token_regular_user_client.get(order_detail_url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    #test owner user can see order detail\r\n    def test_owner_can_see_order_details(self,token_regular_user_client,order_detail_url,order):\r\n        response = token_regular_user_client.get(order_detail_url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    #test user cant see another user order\r\n    def test_another_user_cant_see_order_details(self,token_another_user_client,order_detail_url,order):\r\n        response = token_another_user_client.get(order_detail_url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n    #test unauthenticated user cant see orders\r\n    def test_unauthenticate_user_cant_see_order_details(self,client,order_detail_url,order):\r\n        response = client.get(order_detail_url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestOrderCreateView:\r\n    \"\"\"\r\n    test order create\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self):\r\n        return reverse('orders:order-create')  # آدرس دقیق view\r\n\r\n    #test authenticated user can create order\r\n    def test_authenticated_user_can_create_order(\r\n        self, token_regular_user_client, url, product, shop, regular_user,address\r\n    ):\r\n        data = {\r\n            \"shop\": shop.id,\r\n            \"address\": address.id,\r\n            \"items\": [\r\n                {\r\n                    \"product\": product.id,\r\n                    \"count\": 2\r\n                }\r\n            ]\r\n        }\r\n        response = token_regular_user_client.post(url, data=data, format=\"json\")\r\n        print(response.data)\r\n        print(\"RESPONSE DATA:\", response.data)\r\n\r\n        assert response.status_code == status.HTTP_201_CREATED\r\n        assert Decimal(response.data[\"total_price\"]) == Decimal(product.price) * 2\r\n        assert response.data[\"shop\"] == shop.id\r\n        assert response.data[\"address\"] == address.id\r\n\r\n    #tset unauthenticated user cant create order\r\n    def test_unauthenticated_user_cannot_create_order(self, client, url):\r\n        response = client.post(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n    #test user cant create order with invalid data\r\n    def test_invalid_data_returns_400(self, token_regular_user_client, url, shop):\r\n        data = {\r\n            \"shop\": shop.id,\r\n            \"address\": \"Incomplete data\",\r\n            \"items\": []  # باید حداقل یک آیتم داشته باشه\r\n        }\r\n        response = token_regular_user_client.post(url, data=data, format=\"json\")\r\n        assert response.status_code == status.HTTP_400_BAD_REQUEST\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestOrderUpdateView:\r\n    \"\"\"\r\n    test order update\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,order):\r\n        return reverse('orders:order-update', kwargs={'pk':order.id})\r\n\r\n    #tset owner can update his order\r\n    def test_owner_can_update_order(self,token_regular_user_client,order,url,address):\r\n        response = token_regular_user_client.put(url,data={\"address\":1})\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert response.data[\"address\"] == address.id\r\n\r\n    #test authenticated user cant update another user order\r\n    def test_authenticated_user_cannot_update_order(self,token_another_user_client,order,url):\r\n        response = token_another_user_client.put(url,data={\"address\":1})\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n    #test admin can update user order\r\n    def test_admin_can_update_order(self,token_admin_client,order,url,address):\r\n        response = token_admin_client.put(url,data={\"address\":1})\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert response.data[\"address\"] == address.id\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestOrderDeleteView:\r\n    \"\"\"\r\n    test order delete\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,order):\r\n        return reverse('orders:order-delete', kwargs={'pk':order.id})\r\n\r\n    #test owner can delete his order\r\n    def test_owner_can_delete_order(self,token_regular_user_client,order,url):\r\n        response = token_regular_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_204_NO_CONTENT\r\n\r\n    #test authenticated user cany delete another user order\r\n    def test_authenticated_user_can_delete_order(self,token_another_user_client,order,url):\r\n        response = token_another_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_cannot_delete_order(self, client, url):\r\n        response = client.delete(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n    #test admin can delete user order\r\n    def test_admin_can_delete_order(self,token_admin_client,order,url):\r\n        response = token_admin_client.delete(url)\r\n        assert response.status_code == status.HTTP_204_NO_CONTENT\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestOrderItemListView:\r\n    @pytest.fixture\r\n    def url(self):\r\n        return reverse('orders:orderitem-list')\r\n\r\n    def test_authenticate_user_cannot_see_orderitem_list(self,token_regular_user_client,url):\r\n        response = token_regular_user_client.get(url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n    def test_admin_can_see_orderitem_list(self,token_admin_client,order,url):\r\n        response = token_admin_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    def test_unauthenticated_user_cannot_see_orderitem_list(self,client,url):\r\n        response = client.get(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestOrderItemDetailView:\r\n    \"\"\"\r\n    test order item detail\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self, order_item):\r\n        return reverse(\"orders:orderitem-detail\", kwargs={\"pk\": order_item.id})\r\n\r\n    #test admin can view user order_item\r\n    def test_admin_can_view_order_item_detail(self, token_admin_client, url, order_item):\r\n        response = token_admin_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert response.data\r\n\r\n    #test unauthenticated user cant view other user order_item\r\n    def test_unauthenticated_user_cannot_view_order_item_detail(self, client, order_item, url):\r\n        response = client.get(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n    #test authenticated user cant\r\n    def test_authenticated_user_cannot_view_order_item_detail(self, token_another_user_client, order_item, url):\r\n        response = token_another_user_client.get(url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n    #test owner can get view his order_item\r\n    def test_owner_can_view_order_item_detail(self,token_regular_user_client,order_item,url):\r\n        response = token_regular_user_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestOrderItemUpdateView:\r\n    \"\"\"\r\n    test order item update\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,order_item):\r\n        return reverse(\"orders:orderitem-update\", kwargs={\"pk\": order_item.id})\r\n\r\n    #test owner user can update his order_item\r\n    def test_owner_user_can_update_order_item(self,token_regular_user_client,order_item,url,address):\r\n        response = token_regular_user_client.put(url,data={\"count\":5})\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert response.data[\"count\"] == 5\r\n\r\n    #test admin can see user order_item\r\n    def test_admin_can_update_order_item(self,token_admin_client,order_item,url,address):\r\n        response = token_admin_client.put(url,data={\"count\":5})\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert response.data[\"count\"] == 5\r\n\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_cannot_update_order_item(self,client,order_item,url):\r\n        response = client.put(url,data={\"count\":5})\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n    #test user cant update another user order_item\r\n    def test_authenticated_user_cannot_update_order_item(self,token_another_user_client,order_item,url,address):\r\n        response = token_another_user_client.put(url,data={\"count\":5})\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestOrderItemDeleteView:\r\n    \"\"\"\r\n    test order item delete\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,order_item):\r\n        return reverse(\"orders:orderitem-delete\", kwargs={\"pk\": order_item.id})\r\n\r\n    #test user can delete his order_item\r\n    def test_owner_can_delete_order_item(self,token_regular_user_client,order_item,url):\r\n        response = token_regular_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    #test admin can delete user order_item\r\n    def test_admin_can_delete_order_item(self,token_admin_client,order_item,url):\r\n        response = token_admin_client.delete(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_cannot_delete_order_item(self,client,order_item,url):\r\n        response = client.delete(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n    #test user cant delete other user order_item\r\n    def test_authenticated_user_cannot_delete_order_item(self,token_another_user_client,order_item,url):\r\n        response = token_another_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestDeliveryListView:\r\n\r\n    \"\"\"\r\n    test delivery list\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self):\r\n        return reverse(\"orders:delivery-list\")\r\n\r\n    #test authenticated user can see delivery_list\r\n    def test_authenticated_user_can_view_delivery_list(self,token_regular_user_client,url):\r\n        response = token_regular_user_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_cannot_view_delivery_list(self,client,url):\r\n        response = client.get(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n    #test admin can\r\n    def test_admin_can_view_delivery_list(self,token_admin_client,url):\r\n        response = token_admin_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestDeliveryDetailView:\r\n    \"\"\"\r\n    test delivery detail\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,delivery):\r\n        return reverse(\"orders:delivery-detail\", kwargs={\"pk\": delivery.id})\r\n\r\n    #test authenticated user can see delivery method\r\n    def test_authenticated_user_can_view_delivery_detail(self,token_regular_user_client,delivery,url):\r\n        response = token_regular_user_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_cannot_view_delivery_detail(self,client,delivery,url):\r\n        response = client.get(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestDeliveryCreateView:\r\n    \"\"\"\r\n    test delivery create\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self):\r\n        return reverse(\"orders:delivery-create\")\r\n\r\n    #test admin can create delivery method\r\n    def test_admin_can_create_delivery_method(self,token_admin_client,delivery,url,order):\r\n        data = {\r\n            \"order\":order.id,\r\n            \"method\":\"TPOX\",\r\n        }\r\n\r\n        response = token_admin_client.post(url,data=data)\r\n        assert response.status_code == status.HTTP_201_CREATED\r\n\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_cannot_create_delivery_method(self,client,delivery,url,order):\r\n\r\n        data = {\r\n            \"order\":order.id,\r\n            \"method\":\"TPOX\",\r\n        }\r\n        response = client.post(url,data=data)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n    #test authenticated user cant\r\n    def test_authenticated_user_cannot_create_delivery_method(self,token_another_user_client,url,order):\r\n        data = {\r\n            \"order\":order.id,\r\n            \"method\":\"TPOX\",\r\n        }\r\n        response = token_another_user_client.post(url,data=data)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestDeliveryDeleteView:\r\n    \"\"\"\r\n    test delivery delete\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,delivery):\r\n        return reverse(\"orders:delivery-delete\", kwargs={\"pk\": delivery.id})\r\n\r\n    #test admin can delete delivery method\r\n    def test_admin_can_delete_delivery_method(self,token_admin_client,delivery,url):\r\n        response = token_admin_client.delete(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_cannot_delete_delivery_method(self,client,delivery,url):\r\n        response = client.delete(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n    #test authenticated user cant\r\n    def test_authenticated_user_cannot_delete_delivery_method(self,token_regular_user_client,delivery,url):\r\n        response = token_regular_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/tests/orders/test_orders_views.py b/ecommerce/tests/orders/test_orders_views.py
--- a/ecommerce/tests/orders/test_orders_views.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/tests/orders/test_orders_views.py	(date 1748963536428)
@@ -7,23 +7,26 @@
 
 @pytest.mark.django_db
 class TestOrderListViews:
-    """test order list """
+    """test order list"""
+
     @pytest.fixture
     def order_list_url(self):
-        return reverse('orders:order-list')
+        return reverse("orders:order-list")
 
-    #test admin just can see all of order_list
-    def test_admin_can_see_orders_list(self,token_admin_client,order_list_url, order):
+    # test admin just can see all of order_list
+    def test_admin_can_see_orders_list(self, token_admin_client, order_list_url, order):
         response = token_admin_client.get(order_list_url)
         assert response.status_code == status.HTTP_200_OK
 
-    #test unauthenticated user cant
+    # test unauthenticated user cant
     def test_unauthenticated_user_cannot_list_orders(self, client, order_list_url):
         response = client.get(order_list_url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
-    #test authenticate user cant
-    def test_authenticated_user_cannot_see_others_order(self,token_another_user_client,order_list_url,order):
+    # test authenticate user cant
+    def test_authenticated_user_cannot_see_others_order(
+        self, token_another_user_client, order_list_url, order
+    ):
         response = token_another_user_client.get(order_list_url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
@@ -33,27 +36,36 @@
     """
     test order detail
     """
+
     @pytest.fixture
-    def order_detail_url(self,order):
-        return reverse('orders:order-detail', kwargs={'pk':order.id})
+    def order_detail_url(self, order):
+        return reverse("orders:order-detail", kwargs={"pk": order.id})
 
-    #test admin user can see order detail
-    def test_admin_can_see_order_details(self,token_regular_user_client,order_detail_url,order):
+    # test admin user can see order detail
+    def test_admin_can_see_order_details(
+        self, token_regular_user_client, order_detail_url, order
+    ):
         response = token_regular_user_client.get(order_detail_url)
         assert response.status_code == status.HTTP_200_OK
 
-    #test owner user can see order detail
-    def test_owner_can_see_order_details(self,token_regular_user_client,order_detail_url,order):
+    # test owner user can see order detail
+    def test_owner_can_see_order_details(
+        self, token_regular_user_client, order_detail_url, order
+    ):
         response = token_regular_user_client.get(order_detail_url)
         assert response.status_code == status.HTTP_200_OK
 
-    #test user cant see another user order
-    def test_another_user_cant_see_order_details(self,token_another_user_client,order_detail_url,order):
+    # test user cant see another user order
+    def test_another_user_cant_see_order_details(
+        self, token_another_user_client, order_detail_url, order
+    ):
         response = token_another_user_client.get(order_detail_url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
-    #test unauthenticated user cant see orders
-    def test_unauthenticate_user_cant_see_order_details(self,client,order_detail_url,order):
+    # test unauthenticated user cant see orders
+    def test_unauthenticate_user_cant_see_order_details(
+        self, client, order_detail_url, order
+    ):
         response = client.get(order_detail_url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
@@ -63,23 +75,19 @@
     """
     test order create
     """
+
     @pytest.fixture
     def url(self):
-        return reverse('orders:order-create')  # آدرس دقیق view
+        return reverse("orders:order-create")  # آدرس دقیق view
 
-    #test authenticated user can create order
+    # test authenticated user can create order
     def test_authenticated_user_can_create_order(
-        self, token_regular_user_client, url, product, shop, regular_user,address
+        self, token_regular_user_client, url, product, shop, regular_user, address
     ):
         data = {
             "shop": shop.id,
             "address": address.id,
-            "items": [
-                {
-                    "product": product.id,
-                    "count": 2
-                }
-            ]
+            "items": [{"product": product.id, "count": 2}],
         }
         response = token_regular_user_client.post(url, data=data, format="json")
         print(response.data)
@@ -90,17 +98,17 @@
         assert response.data["shop"] == shop.id
         assert response.data["address"] == address.id
 
-    #tset unauthenticated user cant create order
+    # tset unauthenticated user cant create order
     def test_unauthenticated_user_cannot_create_order(self, client, url):
         response = client.post(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
-    #test user cant create order with invalid data
+    # test user cant create order with invalid data
     def test_invalid_data_returns_400(self, token_regular_user_client, url, shop):
         data = {
             "shop": shop.id,
             "address": "Incomplete data",
-            "items": []  # باید حداقل یک آیتم داشته باشه
+            "items": [],  # باید حداقل یک آیتم داشته باشه
         }
         response = token_regular_user_client.post(url, data=data, format="json")
         assert response.status_code == status.HTTP_400_BAD_REQUEST
@@ -111,24 +119,29 @@
     """
     test order update
     """
+
     @pytest.fixture
-    def url(self,order):
-        return reverse('orders:order-update', kwargs={'pk':order.id})
+    def url(self, order):
+        return reverse("orders:order-update", kwargs={"pk": order.id})
 
-    #tset owner can update his order
-    def test_owner_can_update_order(self,token_regular_user_client,order,url,address):
-        response = token_regular_user_client.put(url,data={"address":1})
+    # tset owner can update his order
+    def test_owner_can_update_order(
+        self, token_regular_user_client, order, url, address
+    ):
+        response = token_regular_user_client.put(url, data={"address": 1})
         assert response.status_code == status.HTTP_200_OK
         assert response.data["address"] == address.id
 
-    #test authenticated user cant update another user order
-    def test_authenticated_user_cannot_update_order(self,token_another_user_client,order,url):
-        response = token_another_user_client.put(url,data={"address":1})
+    # test authenticated user cant update another user order
+    def test_authenticated_user_cannot_update_order(
+        self, token_another_user_client, order, url
+    ):
+        response = token_another_user_client.put(url, data={"address": 1})
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
-    #test admin can update user order
-    def test_admin_can_update_order(self,token_admin_client,order,url,address):
-        response = token_admin_client.put(url,data={"address":1})
+    # test admin can update user order
+    def test_admin_can_update_order(self, token_admin_client, order, url, address):
+        response = token_admin_client.put(url, data={"address": 1})
         assert response.status_code == status.HTTP_200_OK
         assert response.data["address"] == address.id
 
@@ -138,27 +151,30 @@
     """
     test order delete
     """
+
     @pytest.fixture
-    def url(self,order):
-        return reverse('orders:order-delete', kwargs={'pk':order.id})
+    def url(self, order):
+        return reverse("orders:order-delete", kwargs={"pk": order.id})
 
-    #test owner can delete his order
-    def test_owner_can_delete_order(self,token_regular_user_client,order,url):
+    # test owner can delete his order
+    def test_owner_can_delete_order(self, token_regular_user_client, order, url):
         response = token_regular_user_client.delete(url)
         assert response.status_code == status.HTTP_204_NO_CONTENT
 
-    #test authenticated user cany delete another user order
-    def test_authenticated_user_can_delete_order(self,token_another_user_client,order,url):
+    # test authenticated user cany delete another user order
+    def test_authenticated_user_can_delete_order(
+        self, token_another_user_client, order, url
+    ):
         response = token_another_user_client.delete(url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
-    #test unauthenticated user cant
+    # test unauthenticated user cant
     def test_unauthenticated_user_cannot_delete_order(self, client, url):
         response = client.delete(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
-    #test admin can delete user order
-    def test_admin_can_delete_order(self,token_admin_client,order,url):
+    # test admin can delete user order
+    def test_admin_can_delete_order(self, token_admin_client, order, url):
         response = token_admin_client.delete(url)
         assert response.status_code == status.HTTP_204_NO_CONTENT
 
@@ -167,17 +183,19 @@
 class TestOrderItemListView:
     @pytest.fixture
     def url(self):
-        return reverse('orders:orderitem-list')
+        return reverse("orders:orderitem-list")
 
-    def test_authenticate_user_cannot_see_orderitem_list(self,token_regular_user_client,url):
+    def test_authenticate_user_cannot_see_orderitem_list(
+        self, token_regular_user_client, url
+    ):
         response = token_regular_user_client.get(url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
-    def test_admin_can_see_orderitem_list(self,token_admin_client,order,url):
+    def test_admin_can_see_orderitem_list(self, token_admin_client, order, url):
         response = token_admin_client.get(url)
         assert response.status_code == status.HTTP_200_OK
 
-    def test_unauthenticated_user_cannot_see_orderitem_list(self,client,url):
+    def test_unauthenticated_user_cannot_see_orderitem_list(self, client, url):
         response = client.get(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
@@ -187,28 +205,37 @@
     """
     test order item detail
     """
+
     @pytest.fixture
     def url(self, order_item):
         return reverse("orders:orderitem-detail", kwargs={"pk": order_item.id})
 
-    #test admin can view user order_item
-    def test_admin_can_view_order_item_detail(self, token_admin_client, url, order_item):
+    # test admin can view user order_item
+    def test_admin_can_view_order_item_detail(
+        self, token_admin_client, url, order_item
+    ):
         response = token_admin_client.get(url)
         assert response.status_code == status.HTTP_200_OK
         assert response.data
 
-    #test unauthenticated user cant view other user order_item
-    def test_unauthenticated_user_cannot_view_order_item_detail(self, client, order_item, url):
+    # test unauthenticated user cant view other user order_item
+    def test_unauthenticated_user_cannot_view_order_item_detail(
+        self, client, order_item, url
+    ):
         response = client.get(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
-    #test authenticated user cant
-    def test_authenticated_user_cannot_view_order_item_detail(self, token_another_user_client, order_item, url):
+    # test authenticated user cant
+    def test_authenticated_user_cannot_view_order_item_detail(
+        self, token_another_user_client, order_item, url
+    ):
         response = token_another_user_client.get(url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
-    #test owner can get view his order_item
-    def test_owner_can_view_order_item_detail(self,token_regular_user_client,order_item,url):
+    # test owner can get view his order_item
+    def test_owner_can_view_order_item_detail(
+        self, token_regular_user_client, order_item, url
+    ):
         response = token_regular_user_client.get(url)
         assert response.status_code == status.HTTP_200_OK
 
@@ -218,30 +245,39 @@
     """
     test order item update
     """
+
     @pytest.fixture
-    def url(self,order_item):
+    def url(self, order_item):
         return reverse("orders:orderitem-update", kwargs={"pk": order_item.id})
 
-    #test owner user can update his order_item
-    def test_owner_user_can_update_order_item(self,token_regular_user_client,order_item,url,address):
-        response = token_regular_user_client.put(url,data={"count":5})
+    # test owner user can update his order_item
+    def test_owner_user_can_update_order_item(
+        self, token_regular_user_client, order_item, url, address
+    ):
+        response = token_regular_user_client.put(url, data={"count": 5})
         assert response.status_code == status.HTTP_200_OK
         assert response.data["count"] == 5
 
-    #test admin can see user order_item
-    def test_admin_can_update_order_item(self,token_admin_client,order_item,url,address):
-        response = token_admin_client.put(url,data={"count":5})
+    # test admin can see user order_item
+    def test_admin_can_update_order_item(
+        self, token_admin_client, order_item, url, address
+    ):
+        response = token_admin_client.put(url, data={"count": 5})
         assert response.status_code == status.HTTP_200_OK
         assert response.data["count"] == 5
 
-    #test unauthenticated user cant
-    def test_unauthenticated_user_cannot_update_order_item(self,client,order_item,url):
-        response = client.put(url,data={"count":5})
+    # test unauthenticated user cant
+    def test_unauthenticated_user_cannot_update_order_item(
+        self, client, order_item, url
+    ):
+        response = client.put(url, data={"count": 5})
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
-    #test user cant update another user order_item
-    def test_authenticated_user_cannot_update_order_item(self,token_another_user_client,order_item,url,address):
-        response = token_another_user_client.put(url,data={"count":5})
+    # test user cant update another user order_item
+    def test_authenticated_user_cannot_update_order_item(
+        self, token_another_user_client, order_item, url, address
+    ):
+        response = token_another_user_client.put(url, data={"count": 5})
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
 
@@ -250,53 +286,62 @@
     """
     test order item delete
     """
+
     @pytest.fixture
-    def url(self,order_item):
+    def url(self, order_item):
         return reverse("orders:orderitem-delete", kwargs={"pk": order_item.id})
 
-    #test user can delete his order_item
-    def test_owner_can_delete_order_item(self,token_regular_user_client,order_item,url):
+    # test user can delete his order_item
+    def test_owner_can_delete_order_item(
+        self, token_regular_user_client, order_item, url
+    ):
         response = token_regular_user_client.delete(url)
         assert response.status_code == status.HTTP_200_OK
 
-    #test admin can delete user order_item
-    def test_admin_can_delete_order_item(self,token_admin_client,order_item,url):
+    # test admin can delete user order_item
+    def test_admin_can_delete_order_item(self, token_admin_client, order_item, url):
         response = token_admin_client.delete(url)
         assert response.status_code == status.HTTP_200_OK
 
-    #test unauthenticated user cant
-    def test_unauthenticated_user_cannot_delete_order_item(self,client,order_item,url):
+    # test unauthenticated user cant
+    def test_unauthenticated_user_cannot_delete_order_item(
+        self, client, order_item, url
+    ):
         response = client.delete(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
-    #test user cant delete other user order_item
-    def test_authenticated_user_cannot_delete_order_item(self,token_another_user_client,order_item,url):
+    # test user cant delete other user order_item
+    def test_authenticated_user_cannot_delete_order_item(
+        self, token_another_user_client, order_item, url
+    ):
         response = token_another_user_client.delete(url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
 
 @pytest.mark.django_db
 class TestDeliveryListView:
-
     """
     test delivery list
     """
+
     @pytest.fixture
     def url(self):
         return reverse("orders:delivery-list")
 
-    #test authenticated user can see delivery_list
-    def test_authenticated_user_can_view_delivery_list(self,token_regular_user_client,url):
+    # test authenticated user can see delivery_list
+    def test_authenticated_user_can_view_delivery_list(
+        self, token_regular_user_client, url
+    ):
         response = token_regular_user_client.get(url)
         assert response.status_code == status.HTTP_200_OK
 
-    #test unauthenticated user cant
-    def test_unauthenticated_user_cannot_view_delivery_list(self,client,url):
+    # test unauthenticated user cant
+    def test_unauthenticated_user_cannot_view_delivery_list(self, client, url):
         response = client.get(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
-    #test admin can
-    def test_admin_can_view_delivery_list(self,token_admin_client,url):
+    # test admin can
+    def test_admin_can_view_delivery_list(self, token_admin_client, url):
         response = token_admin_client.get(url)
         assert response.status_code == status.HTTP_200_OK
 
@@ -306,17 +351,22 @@
     """
     test delivery detail
     """
+
     @pytest.fixture
-    def url(self,delivery):
+    def url(self, delivery):
         return reverse("orders:delivery-detail", kwargs={"pk": delivery.id})
 
-    #test authenticated user can see delivery method
-    def test_authenticated_user_can_view_delivery_detail(self,token_regular_user_client,delivery,url):
+    # test authenticated user can see delivery method
+    def test_authenticated_user_can_view_delivery_detail(
+        self, token_regular_user_client, delivery, url
+    ):
         response = token_regular_user_client.get(url)
         assert response.status_code == status.HTTP_200_OK
 
-    #test unauthenticated user cant
-    def test_unauthenticated_user_cannot_view_delivery_detail(self,client,delivery,url):
+    # test unauthenticated user cant
+    def test_unauthenticated_user_cannot_view_delivery_detail(
+        self, client, delivery, url
+    ):
         response = client.get(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
@@ -326,37 +376,44 @@
     """
     test delivery create
     """
+
     @pytest.fixture
     def url(self):
         return reverse("orders:delivery-create")
 
-    #test admin can create delivery method
-    def test_admin_can_create_delivery_method(self,token_admin_client,delivery,url,order):
+    # test admin can create delivery method
+    def test_admin_can_create_delivery_method(
+        self, token_admin_client, delivery, url, order
+    ):
         data = {
-            "order":order.id,
-            "method":"TPOX",
+            "order": order.id,
+            "method": "TPOX",
         }
 
-        response = token_admin_client.post(url,data=data)
+        response = token_admin_client.post(url, data=data)
         assert response.status_code == status.HTTP_201_CREATED
 
-    #test unauthenticated user cant
-    def test_unauthenticated_user_cannot_create_delivery_method(self,client,delivery,url,order):
+    # test unauthenticated user cant
+    def test_unauthenticated_user_cannot_create_delivery_method(
+        self, client, delivery, url, order
+    ):
 
         data = {
-            "order":order.id,
-            "method":"TPOX",
+            "order": order.id,
+            "method": "TPOX",
         }
-        response = client.post(url,data=data)
+        response = client.post(url, data=data)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
-    #test authenticated user cant
-    def test_authenticated_user_cannot_create_delivery_method(self,token_another_user_client,url,order):
+    # test authenticated user cant
+    def test_authenticated_user_cannot_create_delivery_method(
+        self, token_another_user_client, url, order
+    ):
         data = {
-            "order":order.id,
-            "method":"TPOX",
+            "order": order.id,
+            "method": "TPOX",
         }
-        response = token_another_user_client.post(url,data=data)
+        response = token_another_user_client.post(url, data=data)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
 
@@ -365,21 +422,26 @@
     """
     test delivery delete
     """
+
     @pytest.fixture
-    def url(self,delivery):
+    def url(self, delivery):
         return reverse("orders:delivery-delete", kwargs={"pk": delivery.id})
 
-    #test admin can delete delivery method
-    def test_admin_can_delete_delivery_method(self,token_admin_client,delivery,url):
+    # test admin can delete delivery method
+    def test_admin_can_delete_delivery_method(self, token_admin_client, delivery, url):
         response = token_admin_client.delete(url)
         assert response.status_code == status.HTTP_200_OK
 
-    #test unauthenticated user cant
-    def test_unauthenticated_user_cannot_delete_delivery_method(self,client,delivery,url):
+    # test unauthenticated user cant
+    def test_unauthenticated_user_cannot_delete_delivery_method(
+        self, client, delivery, url
+    ):
         response = client.delete(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
-    #test authenticated user cant
-    def test_authenticated_user_cannot_delete_delivery_method(self,token_regular_user_client,delivery,url):
+    # test authenticated user cant
+    def test_authenticated_user_cannot_delete_delivery_method(
+        self, token_regular_user_client, delivery, url
+    ):
         response = token_regular_user_client.delete(url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
Index: ecommerce/tests/interactions/test_interactions_views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom django.urls import reverse\r\nfrom rest_framework import status\r\n\r\nfrom interactions.models import Comment, Rate\r\nfrom tests.conftest import comment, regular_user\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestCommentCreateView:\r\n    \"\"\"\r\n    test comment create\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self):\r\n        return reverse (\"interactions:comment-create\")\r\n\r\n    #test authenticated user can create comment with no parent\r\n    def test_authenticate_user_can_create_no_parent_comment(self, token_regular_user_client, url,product):\r\n        data = {\r\n            \"product\": product.id,\r\n            \"text\" : \"this is a test comment\",\r\n        }\r\n        response = token_regular_user_client.post(url, data)\r\n        assert response.status_code == status.HTTP_201_CREATED\r\n        assert response.data[\"text\"] == \"this is a test comment\"\r\n        assert response.data\r\n\r\n    #test authenticated user can replay to comment with parent\r\n    def test_authenticate_user_can_replay_comment_with_parent(self, token_regular_user_client, url,product,another_user):\r\n        parent = Comment.objects.create(product=product, text=\"this is a test comment\",user = another_user)\r\n        data = {\r\n            \"product\": product.id,\r\n            \"text\" : \"this is a test comment\",\r\n            \"parent\": parent.id,\r\n        }\r\n        response = token_regular_user_client.post(url, data)\r\n        assert response.status_code == status.HTTP_201_CREATED\r\n        assert response.data[\"text\"] == \"this is a test comment\"\r\n        assert response.data\r\n\r\n    #test unauthenticated user cant create comment\r\n    def test_unauthenticated_user_cant_create_comment(self, client, url,product):\r\n        data = {\r\n            \"product\": product.id,\r\n            \"text\" : \"this is a test comment\",\r\n        }\r\n        response = client.post(url, data)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n    #test cant replay to comment with no id\r\n    def test_invalid_parent_comment_id(self, token_regular_user_client, url, product):\r\n        data = {\r\n            \"text\": \"Trying to reply to non-existent comment\",\r\n            \"product\": product.id,\r\n            \"parent\": 9999,  #no comment with this id\r\n        }\r\n        response = token_regular_user_client.post(url, data=data)\r\n        assert response.status_code in [status.HTTP_400_BAD_REQUEST, status.HTTP_404_NOT_FOUND]\r\n\r\n@pytest.mark.django_db\r\nclass TestCommentListView:\r\n    \"\"\"\r\n    test comment list\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self):\r\n        return reverse (\"interactions:comment-list\")\r\n\r\n    #test authenticated user can see lists of the comment\r\n    def test_authenticate_user_can_see_list__comment(self, token_regular_user_client, url):\r\n        response = token_regular_user_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    #tset unauthenticated user cant see\r\n    def test_unauthenticated_user_cant_list_comment(self, client, url):\r\n        response = client.get(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n@pytest.mark.django_db\r\nclass TestCommentDetailView:\r\n    \"\"\"\r\n    test comment detail\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,comment):\r\n        return reverse (\"interactions:comment-detail\",kwargs={\"pk\": comment.id})\r\n\r\n    #test authenticated user can see comment detail\r\n    def test_authenticate_user_can_see_detail__comment(self, token_regular_user_client, url):\r\n        response = token_regular_user_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert response.data\r\n\r\n    #test unauthenticated user cant see comment detail\r\n    def test_unauthenticated_user_cant_get_detail_comment(self, client, url):\r\n        response = client.get(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n@pytest.mark.django_db\r\nclass TestCommentUpdateView:\r\n    \"\"\"\r\n    test comment update\r\n    \"\"\"\r\n\r\n    @pytest.fixture\r\n    def url(self,comment):\r\n        return reverse (\"interactions:comment-update\",kwargs={\"pk\":comment.id})\r\n\r\n    #test user can update his own comment\r\n    def test_user_can_update_his_own_comment(self, token_regular_user_client, url):\r\n        data = {\r\n            \"text\": \"this is a test comment2\",\r\n        }\r\n        response = token_regular_user_client.put(url, data)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    #test user cant update another one comment\r\n    def test_another_user_cant_update_regular_user_comment(self,token_another_user_client,url):\r\n        data = {\r\n            \"text\": \"this is a test comment2\",\r\n        }\r\n        response = token_another_user_client.put(url, data)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n    #test admin can update users comment\r\n    def test_admin_can_update_regular_user_comment(self,token_admin_client,url):\r\n        data = {\r\n            \"text\": \"this is a test comment2\",\r\n        }\r\n        response = token_admin_client.put(url, data)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n@pytest.mark.django_db\r\nclass TestCommentDeleteView:\r\n    \"\"\"\r\n    test comment delete\r\n    \"\"\"\r\n\r\n    @pytest.fixture\r\n    def url(self,comment):\r\n        return reverse (\"interactions:comment-delete\",kwargs={\"pk\":comment.id})\r\n\r\n    #test user can delete his comment\r\n    def test_user_can_delete_his_own_comment(self, token_regular_user_client, url):\r\n        response = token_regular_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_204_NO_CONTENT\r\n\r\n    #test user cant delete other comments\r\n    def test_another_user_cant_delete_regular_user_comment(self,token_another_user_client,url):\r\n        response = token_another_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n    #test admin can delete everyone comment\r\n    def test_admin_cant_delete_regular_user_comment(self,token_admin_client,url):\r\n        response = token_admin_client.delete(url)\r\n        assert response.status_code == status.HTTP_204_NO_CONTENT\r\n\r\n@pytest.mark.django_db\r\nclass TestRateCreateView:\r\n    \"\"\"\r\n    test rate create\r\n    \"\"\"\r\n\r\n    @pytest.fixture\r\n    def url(self):\r\n        return reverse (\"interactions:rate-create\")\r\n\r\n    #test authenticated user can rate\r\n    def test_authenticate_user_can_rete_product(self,url,token_regular_user_client,product):\r\n        data = {\r\n            \"product\": product.id,\r\n            \"score\": 4\r\n        }\r\n        response = token_regular_user_client.post(url, data= data)\r\n        print(response.data)\r\n        assert response.status_code == status.HTTP_201_CREATED\r\n\r\n    #test unauthenticated user cant rate\r\n    def test_unauthenticated_user_cant_create_rate(self,client,url):\r\n        response = client.post(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n    #test authenticated user cant rate product with no pk\r\n    def test_invalid_product_id(self, url, token_regular_user_client):\r\n        data = {\"product\": 9999, \"score\": 3}\r\n        response = token_regular_user_client.post(url, data=data)\r\n        assert response.status_code == status.HTTP_404_NOT_FOUND\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/tests/interactions/test_interactions_views.py b/ecommerce/tests/interactions/test_interactions_views.py
--- a/ecommerce/tests/interactions/test_interactions_views.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/tests/interactions/test_interactions_views.py	(date 1748963536338)
@@ -11,27 +11,34 @@
     """
     test comment create
     """
+
     @pytest.fixture
     def url(self):
-        return reverse ("interactions:comment-create")
+        return reverse("interactions:comment-create")
 
-    #test authenticated user can create comment with no parent
-    def test_authenticate_user_can_create_no_parent_comment(self, token_regular_user_client, url,product):
+    # test authenticated user can create comment with no parent
+    def test_authenticate_user_can_create_no_parent_comment(
+        self, token_regular_user_client, url, product
+    ):
         data = {
             "product": product.id,
-            "text" : "this is a test comment",
+            "text": "this is a test comment",
         }
         response = token_regular_user_client.post(url, data)
         assert response.status_code == status.HTTP_201_CREATED
         assert response.data["text"] == "this is a test comment"
         assert response.data
 
-    #test authenticated user can replay to comment with parent
-    def test_authenticate_user_can_replay_comment_with_parent(self, token_regular_user_client, url,product,another_user):
-        parent = Comment.objects.create(product=product, text="this is a test comment",user = another_user)
+    # test authenticated user can replay to comment with parent
+    def test_authenticate_user_can_replay_comment_with_parent(
+        self, token_regular_user_client, url, product, another_user
+    ):
+        parent = Comment.objects.create(
+            product=product, text="this is a test comment", user=another_user
+        )
         data = {
             "product": product.id,
-            "text" : "this is a test comment",
+            "text": "this is a test comment",
             "parent": parent.id,
         }
         response = token_regular_user_client.post(url, data)
@@ -39,64 +46,76 @@
         assert response.data["text"] == "this is a test comment"
         assert response.data
 
-    #test unauthenticated user cant create comment
-    def test_unauthenticated_user_cant_create_comment(self, client, url,product):
+    # test unauthenticated user cant create comment
+    def test_unauthenticated_user_cant_create_comment(self, client, url, product):
         data = {
             "product": product.id,
-            "text" : "this is a test comment",
+            "text": "this is a test comment",
         }
         response = client.post(url, data)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
-    #test cant replay to comment with no id
+    # test cant replay to comment with no id
     def test_invalid_parent_comment_id(self, token_regular_user_client, url, product):
         data = {
             "text": "Trying to reply to non-existent comment",
             "product": product.id,
-            "parent": 9999,  #no comment with this id
+            "parent": 9999,  # no comment with this id
         }
         response = token_regular_user_client.post(url, data=data)
-        assert response.status_code in [status.HTTP_400_BAD_REQUEST, status.HTTP_404_NOT_FOUND]
+        assert response.status_code in [
+            status.HTTP_400_BAD_REQUEST,
+            status.HTTP_404_NOT_FOUND,
+        ]
+
 
 @pytest.mark.django_db
 class TestCommentListView:
     """
     test comment list
     """
+
     @pytest.fixture
     def url(self):
-        return reverse ("interactions:comment-list")
+        return reverse("interactions:comment-list")
 
-    #test authenticated user can see lists of the comment
-    def test_authenticate_user_can_see_list__comment(self, token_regular_user_client, url):
+    # test authenticated user can see lists of the comment
+    def test_authenticate_user_can_see_list__comment(
+        self, token_regular_user_client, url
+    ):
         response = token_regular_user_client.get(url)
         assert response.status_code == status.HTTP_200_OK
 
-    #tset unauthenticated user cant see
+    # tset unauthenticated user cant see
     def test_unauthenticated_user_cant_list_comment(self, client, url):
         response = client.get(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
+
 @pytest.mark.django_db
 class TestCommentDetailView:
     """
     test comment detail
     """
+
     @pytest.fixture
-    def url(self,comment):
-        return reverse ("interactions:comment-detail",kwargs={"pk": comment.id})
+    def url(self, comment):
+        return reverse("interactions:comment-detail", kwargs={"pk": comment.id})
 
-    #test authenticated user can see comment detail
-    def test_authenticate_user_can_see_detail__comment(self, token_regular_user_client, url):
+    # test authenticated user can see comment detail
+    def test_authenticate_user_can_see_detail__comment(
+        self, token_regular_user_client, url
+    ):
         response = token_regular_user_client.get(url)
         assert response.status_code == status.HTTP_200_OK
         assert response.data
 
-    #test unauthenticated user cant see comment detail
+    # test unauthenticated user cant see comment detail
     def test_unauthenticated_user_cant_get_detail_comment(self, client, url):
         response = client.get(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
+
 @pytest.mark.django_db
 class TestCommentUpdateView:
     """
@@ -104,10 +123,10 @@
     """
 
     @pytest.fixture
-    def url(self,comment):
-        return reverse ("interactions:comment-update",kwargs={"pk":comment.id})
+    def url(self, comment):
+        return reverse("interactions:comment-update", kwargs={"pk": comment.id})
 
-    #test user can update his own comment
+    # test user can update his own comment
     def test_user_can_update_his_own_comment(self, token_regular_user_client, url):
         data = {
             "text": "this is a test comment2",
@@ -115,22 +134,25 @@
         response = token_regular_user_client.put(url, data)
         assert response.status_code == status.HTTP_200_OK
 
-    #test user cant update another one comment
-    def test_another_user_cant_update_regular_user_comment(self,token_another_user_client,url):
+    # test user cant update another one comment
+    def test_another_user_cant_update_regular_user_comment(
+        self, token_another_user_client, url
+    ):
         data = {
             "text": "this is a test comment2",
         }
         response = token_another_user_client.put(url, data)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
-    #test admin can update users comment
-    def test_admin_can_update_regular_user_comment(self,token_admin_client,url):
+    # test admin can update users comment
+    def test_admin_can_update_regular_user_comment(self, token_admin_client, url):
         data = {
             "text": "this is a test comment2",
         }
         response = token_admin_client.put(url, data)
         assert response.status_code == status.HTTP_200_OK
 
+
 @pytest.mark.django_db
 class TestCommentDeleteView:
     """
@@ -138,24 +160,27 @@
     """
 
     @pytest.fixture
-    def url(self,comment):
-        return reverse ("interactions:comment-delete",kwargs={"pk":comment.id})
+    def url(self, comment):
+        return reverse("interactions:comment-delete", kwargs={"pk": comment.id})
 
-    #test user can delete his comment
+    # test user can delete his comment
     def test_user_can_delete_his_own_comment(self, token_regular_user_client, url):
         response = token_regular_user_client.delete(url)
         assert response.status_code == status.HTTP_204_NO_CONTENT
 
-    #test user cant delete other comments
-    def test_another_user_cant_delete_regular_user_comment(self,token_another_user_client,url):
+    # test user cant delete other comments
+    def test_another_user_cant_delete_regular_user_comment(
+        self, token_another_user_client, url
+    ):
         response = token_another_user_client.delete(url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
-    #test admin can delete everyone comment
-    def test_admin_cant_delete_regular_user_comment(self,token_admin_client,url):
+    # test admin can delete everyone comment
+    def test_admin_cant_delete_regular_user_comment(self, token_admin_client, url):
         response = token_admin_client.delete(url)
         assert response.status_code == status.HTTP_204_NO_CONTENT
 
+
 @pytest.mark.django_db
 class TestRateCreateView:
     """
@@ -164,26 +189,24 @@
 
     @pytest.fixture
     def url(self):
-        return reverse ("interactions:rate-create")
+        return reverse("interactions:rate-create")
 
-    #test authenticated user can rate
-    def test_authenticate_user_can_rete_product(self,url,token_regular_user_client,product):
-        data = {
-            "product": product.id,
-            "score": 4
-        }
-        response = token_regular_user_client.post(url, data= data)
+    # test authenticated user can rate
+    def test_authenticate_user_can_rete_product(
+        self, url, token_regular_user_client, product
+    ):
+        data = {"product": product.id, "score": 4}
+        response = token_regular_user_client.post(url, data=data)
         print(response.data)
         assert response.status_code == status.HTTP_201_CREATED
 
-    #test unauthenticated user cant rate
-    def test_unauthenticated_user_cant_create_rate(self,client,url):
+    # test unauthenticated user cant rate
+    def test_unauthenticated_user_cant_create_rate(self, client, url):
         response = client.post(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
-    #test authenticated user cant rate product with no pk
+    # test authenticated user cant rate product with no pk
     def test_invalid_product_id(self, url, token_regular_user_client):
         data = {"product": 9999, "score": 3}
         response = token_regular_user_client.post(url, data=data)
         assert response.status_code == status.HTTP_404_NOT_FOUND
-
Index: ecommerce/orders/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\r\n\r\nfrom catalog.models import Product\r\nfrom .models import Order, OrderItem, Delivery\r\n\r\n\r\nclass OrderItemSerializer(serializers.ModelSerializer):\r\n    product = serializers.PrimaryKeyRelatedField(queryset=Product.objects.all())\r\n    order = serializers.PrimaryKeyRelatedField(read_only=True)\r\n    class Meta:\r\n        model = OrderItem\r\n        fields = [\"product\", \"count\", \"row_price\", \"order\"]\r\n        extra_kwargs = {\"row_price\": {\"read_only\": True}}\r\n\r\n\r\nclass OrderSerializer(serializers.ModelSerializer):\r\n    items = OrderItemSerializer(many=True)\r\n\r\n    class Meta:\r\n        model = Order\r\n        fields = [\"shop\", \"user\", \"address\", \"items\", \"total_price\"]\r\n        extra_kwargs = {\"user\": {\"read_only\": True}, \"total_price\": {\"read_only\": True}}\r\n\r\n    def create(self, validated_data):\r\n        items_data = validated_data.pop(\"items\")\r\n        order = Order.objects.create(**validated_data)\r\n\r\n        total_price = 0\r\n        for item_data in items_data:\r\n            product = item_data[\"product\"]\r\n            count = item_data[\"count\"]\r\n            row_price = product.price * count\r\n            OrderItem.objects.create(\r\n                order=order, product=product, count=count, row_price=row_price\r\n            )\r\n            total_price += row_price\r\n\r\n        order.total_price = total_price\r\n        order.save()\r\n        return order\r\n\r\n\r\nclass DeliverySerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Delivery\r\n        fields = [\"id\", \"order\", \"method\"]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/orders/serializers.py b/ecommerce/orders/serializers.py
--- a/ecommerce/orders/serializers.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/orders/serializers.py	(date 1748963536228)
@@ -7,6 +7,7 @@
 class OrderItemSerializer(serializers.ModelSerializer):
     product = serializers.PrimaryKeyRelatedField(queryset=Product.objects.all())
     order = serializers.PrimaryKeyRelatedField(read_only=True)
+
     class Meta:
         model = OrderItem
         fields = ["product", "count", "row_price", "order"]
Index: ecommerce/orders/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\nfrom django.db.models.fields import FloatField\r\nfrom accounts.models import User, Address,Time\r\nfrom catalog.models import Product, Shop\r\n\r\n\r\nclass Order(Time):\r\n    shop = models.ForeignKey(Shop, on_delete=models.CASCADE)\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    address = models.ForeignKey(Address, on_delete=models.CASCADE)\r\n    total_price = models.DecimalField(decimal_places=2, max_digits=10, default=0)\r\n\r\n    def __str__(self):\r\n        return f\"Order #{self.id} by {self.user.username}\"\r\n\r\n\r\nclass OrderItem(models.Model):\r\n    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name=\"items\")\r\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\r\n    row_price = models.DecimalField(decimal_places=2, max_digits=10, default=0)\r\n    count = models.IntegerField()\r\n\r\n    def __str__(self):\r\n        return f\"{self.count} x {self.product.name}\"\r\n\r\n\r\nclass Delivery(models.Model):\r\n    METHOD_CHOICES = (\r\n        (\"TPOX\", \"tpox\"),\r\n        (\"POST\", \"post\"),\r\n    )\r\n    order = models.ForeignKey(Order, on_delete=models.CASCADE)\r\n    method = models.CharField(max_length=10, choices=METHOD_CHOICES)\r\n\r\n    def __str__(self):\r\n        return f\"Delivery for Order #{self.order.id} - {self.method}\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/orders/models.py b/ecommerce/orders/models.py
--- a/ecommerce/orders/models.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/orders/models.py	(date 1748963536218)
@@ -1,6 +1,6 @@
 from django.db import models
 from django.db.models.fields import FloatField
-from accounts.models import User, Address,Time
+from accounts.models import User, Address, Time
 from catalog.models import Product, Shop
 
 
Index: ecommerce/tests/catalog/test_catalog_views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport pytest\r\nfrom django.urls import reverse\r\nfrom rest_framework import status\r\nfrom catalog.models import Shop, Category, Wishlist, Product\r\n\r\nfrom tests.conftest import product_seller_user, shop_seller_user, token_admin_client, regular_user\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestProductListView:\r\n    \"\"\"\r\n    test product list view\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self):\r\n        return reverse(\"catalog:product-list\")\r\n    #test authenticated user can\r\n    def test_authenticated_user_can_see_product_list(self, token_regular_user_client, url, ):\r\n        response = token_regular_user_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_cannot_see_product_list(self, client, url):\r\n        response = client.get(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestProductDetailView:\r\n    \"\"\"\r\n    test product detail view\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self, product):\r\n        return reverse(\"catalog:product-detail\", kwargs={\"pk\": product.pk})\r\n    #test authenticated user can\r\n    def test_authenticated_user_can_see_product_detail(self, token_another_user_client, url, product):\r\n        response = token_another_user_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert response.data[\"name\"] == product.name\r\n        assert response.data[\"id\"] == product.id\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_cannot_see_product_detail(self, client, url):\r\n        response = client.get(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n    #test with no product\r\n    def test_return_404_if_product_not_found(self, token_another_user_client, url):\r\n        url = reverse(\"catalog:product-detail\", kwargs={\"pk\": 999})\r\n        response = token_another_user_client.get(url)\r\n        assert response.status_code == status.HTTP_404_NOT_FOUND\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestProductCreateView:\r\n    \"\"\"\r\n    test product create\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self, product):\r\n        return reverse(\"catalog:product-create\")\r\n\r\n    #admin can create product\r\n    def test_admin_can_create_product(self, token_admin_client, url, shop, category):\r\n        data = {\r\n            \"shop\": shop.id,\r\n            \"category\": category.id,\r\n            \"name\": \"test\",\r\n            \"description\": \"test\",\r\n            \"image_url\": \"test\",\r\n            \"price\": 100,\r\n            \"is_active\": True\r\n        }\r\n        response = token_admin_client.post(url, data)\r\n        assert response.status_code == status.HTTP_201_CREATED\r\n\r\n    #seler can create product\r\n    def test_seller_can_create_product(self, token_seller_user_client, url, shop, category):\r\n        data = {\r\n            \"shop\": shop.id,\r\n            \"category\": category.id,\r\n            \"name\": \"test\",\r\n            \"description\": \"test\",\r\n            \"image_url\": \"test\",\r\n            \"price\": 200,\r\n            \"is_active\": True\r\n        }\r\n        response = token_seller_user_client.post(url, data)\r\n        assert response.status_code == status.HTTP_201_CREATED\r\n\r\n    #test regular user cant create product\r\n    def test_regular_user_cannot_create_product(self, token_regular_user_client, url, shop, category):\r\n        data = {\r\n            \"shop\": shop.id,\r\n            \"category\": category.id,\r\n            \"name\": \"test\",\r\n            \"description\": \"test\",\r\n            \"image_url\": \"test\",\r\n            \"price\": 200,\r\n            \"is_active\": True\r\n        }\r\n        response = token_regular_user_client.post(url, data)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n    #test create with invalid product\r\n    def test_invalid_product_data(self, token_seller_user_client, url):\r\n        data = {\r\n            \"name\": \"test\",\r\n            \"description\": \"test\",\r\n        }\r\n        response = token_seller_user_client.post(url, data)\r\n        assert response.status_code == status.HTTP_400_BAD_REQUEST\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestProductUpdateView:\r\n    \"\"\"\r\n    test product update\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self, product, product_seller_user):\r\n        return reverse(\"catalog:product-update\", kwargs={\"pk\": product_seller_user.pk})\r\n\r\n    #test admin can update product\r\n    def test_admin_can_update_product(self, token_admin_client, url,product_seller_user):\r\n        data = {\r\n            \"name\": \"test3\",\r\n        }\r\n        response = token_admin_client.put(url,data)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        product_seller_user.refresh_from_db()\r\n        assert product_seller_user.name == \"test3\"\r\n\r\n\r\n    #test seller can update own product\r\n    def test_seller_can_update_own_product(self, token_seller_user_client, url, product_seller_user,):\r\n        data = {\r\n            \"name\": \"test2\",\r\n        }\r\n        response = token_seller_user_client.put(url, data)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        product_seller_user.refresh_from_db()\r\n        assert product_seller_user.name == \"test2\"\r\n\r\n    #test another seller cant update other sellers product\r\n    def test_another_seller_can_update_other_seller_product(self, token_seller2_user_client, url, product_seller_user):\r\n        data = {\r\n            \"name\": \"test3\",\r\n        }\r\n        response = token_seller2_user_client.put(url, data)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n@pytest.mark.django_db\r\nclass TestProductDeleteView:\r\n    \"\"\"\r\n    test product delete\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,product, product_seller_user):\r\n        return reverse(\"catalog:product-delete\", kwargs={\"pk\": product_seller_user.pk})\r\n\r\n    #test admin can delet product\r\n    def test_admin_can_delete_product(self, token_admin_client, url, product, product_seller_user):\r\n        response = token_admin_client.delete(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        product_seller_user.refresh_from_db()\r\n        assert product_seller_user.is_active is False\r\n\r\n    #test seller can delete own product\r\n    def test_seller_can_delete_own_product(self, token_seller_user_client, url, product, product_seller_user):\r\n        response = token_seller_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        product_seller_user.refresh_from_db()\r\n        assert product_seller_user.is_active is False\r\n\r\n    #test seller cant delete others product\r\n    def test_another_seller_can_delete_other_seller_product(self, token_seller2_user_client, url, product_seller_user):\r\n        response = token_seller2_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n        assert product_seller_user.is_active is True\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestShopListview:\r\n    \"\"\"\r\n    test shop list view\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self, shop,):\r\n        return reverse(\"catalog:shop-list\")\r\n\r\n    #test authenticated user can view shop lists\r\n    def test_authenticated_user_can_view_shop_list(self, token_regular_user_client, shop, url):\r\n        response = token_regular_user_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert response.data\r\n\r\n    #test unauthenticated users cant see shop lists\r\n    def test_unauthenticated_user_can_view_shop_list(self, client, shop, url):\r\n        response = client.get(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestShopDetailView:\r\n    \"\"\"\r\n    test shop detail\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self, shop):\r\n        return reverse(\"catalog:shop-detail\", kwargs={\"pk\": shop.pk})\r\n\r\n    #test authenticated user can view shop detail\r\n    def test_authenticated_user_can_view_shop_detail(self, token_regular_user_client, shop, url):\r\n        response = token_regular_user_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    #test unauthenticated user cant see shop detail\r\n    def test_unauthenticated_user_can_view_shop_detail(self, client, shop, url):\r\n        response = client.get(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestShopCreateView:\r\n    \"\"\"\r\n    test shop create\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self, shop):\r\n        return reverse(\"catalog:shop-create\")\r\n    @pytest.fixture\r\n    def valid_shop_data(self, address):\r\n        return {\r\n            \"name\": \"Test Shop\",\r\n            \"address\": address.id\r\n        }\r\n\r\n    #test admin can create shop\r\n    def test_admin_can_create_shop(self, token_admin_client, shop, url,address,seller_user,valid_shop_data):\r\n        response = token_admin_client.post(url, data= valid_shop_data)\r\n        assert response.status_code == status.HTTP_201_CREATED\r\n\r\n    #test seller can create shop\r\n    def test_seller_can_create_shop(self,token_seller_user_client, shop, url,address,valid_shop_data):\r\n        response = token_seller_user_client.post(url, data= valid_shop_data)\r\n        assert response.status_code == status.HTTP_201_CREATED\r\n\r\n    #test regular user cannot create shop\r\n    def test_regular_user_cannot_create_shop(self, token_regular_user_client, shop, url,address,valid_shop_data):\r\n        response = token_regular_user_client.post(url, data= valid_shop_data)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n    #test unauthenticated user cannot create shop\r\n    def test_unauthenticated_user_cannot_create_shop(self, client, shop, url,address,valid_shop_data):\r\n        response = client.post(url, data= valid_shop_data)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestShopUpdateView:\r\n    \"\"\"\r\n    test shop update\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self, shop_seller_user):\r\n        return reverse(\"catalog:shop-update\", kwargs={\"pk\": shop_seller_user.pk})\r\n\r\n    #test admin can update all shops\r\n    def test_admin_can_update_shop(self, token_admin_client, url,shop_seller_user):\r\n        data = {\r\n            \"name\": \"admin update name\",\r\n        }\r\n        response = token_admin_client.put(url, data)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        shop_seller_user.refresh_from_db()\r\n        assert shop_seller_user.name == \"admin update name\"\r\n\r\n    #test seller can update his own shop\r\n    def test_owner_can_update_shop(self, token_seller_user_client, url, shop_seller_user):\r\n        data = {\r\n            \"name\": \"owner update name\",\r\n        }\r\n        response = token_seller_user_client.put(url, data)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        shop_seller_user.refresh_from_db()\r\n        assert shop_seller_user.name == \"owner update name\"\r\n\r\n    #test seller cant update others shop\r\n    def test_another_seller_can_update_shop(self, token_seller2_user_client, url, shop_seller_user):\r\n        data = {\r\n            \"name\": \"another owner update name\",\r\n        }\r\n        response = token_seller2_user_client.put(url, data)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestShopDeleteView:\r\n    \"\"\"\r\n    test shop delete\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self, shop_seller_user):\r\n        return reverse(\"catalog:shop-delete\", kwargs={\"pk\": shop_seller_user.id})\r\n\r\n    #test admin can delete shop\r\n    def test_admin_can_delete_shop(self, token_admin_client, url, shop_seller_user):\r\n        response = token_admin_client.delete(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        shop_seller_user.refresh_from_db()\r\n        assert shop_seller_user.is_active is False\r\n\r\n    #test owner seller can delete his shop\r\n    def test_owner_can_delete_shop(self, token_seller_user_client, url, shop_seller_user):\r\n        response = token_seller_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        shop_seller_user.refresh_from_db()\r\n        assert shop_seller_user.is_active is False\r\n\r\n    #test seller cant delete another seller shop\r\n    def test_another_seller_can_delete_shop(self, token_seller2_user_client, url, shop_seller_user):\r\n        response = token_seller2_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestCategoryListView:\r\n    \"\"\"\r\n    test category list\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,shop):\r\n        return reverse(\"catalog:category-list\")\r\n\r\n    #test authenticated user can view\r\n    def test_authenticated_user_can_view_categories(self,token_regular_user_client,url,):\r\n        response = token_regular_user_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_cant_view_categories(self,client,url,):\r\n        response = client.get(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestCategoryDetailView:\r\n    \"\"\"\r\n    test category detail\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,category):\r\n        return reverse(\"catalog:category-detail\", kwargs={\"pk\": category.id})\r\n\r\n    #test authenticated user can view\r\n    def test_authenticated_user_can_view_category_detail(self,token_regular_user_client,category,url,):\r\n        response = token_regular_user_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        category.refresh_from_db()\r\n        assert category.name == category.name\r\n\r\n    #test unauthenticated user cant view\r\n    def test_unauthenticated_user_cant_view_category_detail(self,client,url,):\r\n        response = client.get(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestCreateCategoryView:\r\n    \"\"\"\r\n    test create category\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,category):\r\n        return reverse(\"catalog:category-create\")\r\n\r\n    #test admin can create category with no parent\r\n    def test_admin_can_create_category_without_parent(self,token_admin_client,url):\r\n        data = {\"name\": \"Electronic\"}\r\n        response = token_admin_client.post(url, data)\r\n        assert response.status_code == status.HTTP_201_CREATED\r\n        assert response.data[\"name\"] == \"Electronic\"\r\n        assert Category.objects.filter(name=\"Electronic\").exists()\r\n\r\n    #test admin can create category with parent\r\n    def test_admin_can_create_category_with_parent(self,token_admin_client,url):\r\n        parent = Category.objects.create(name=\"Electronic\")\r\n        data = {\"name\": \"labtops\",\"parent\":parent.id}\r\n        response = token_admin_client.post(url, data)\r\n        assert response.status_code == status.HTTP_201_CREATED\r\n        assert response.data[\"name\"] == \"labtops\"\r\n        assert response.data[\"parent\"][\"id\"] == parent.id\r\n\r\n    #test regular user cant create category\r\n    def test_regular_user_cant_create_category(self,token_regular_user_client,url):\r\n        data = {\"name\": \"Electronic\"}\r\n        response = token_regular_user_client.post(url, data)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n    #test create category with invalid data\r\n    def test_invalid_data_returns_400(self,token_admin_client,url):\r\n\r\n        data = {\"parent\": \"\"}\r\n        response = token_admin_client.post(url,data)\r\n        assert response.status_code == status.HTTP_400_BAD_REQUEST\r\n\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_can_view_category(self,client,url,):\r\n        data = {\"name\": \"Electronic\"}\r\n        response = client.post(url, data)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n@pytest.mark.django_db\r\nclass TestCategoryUpdateView:\r\n    \"\"\"\r\n    test category update\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,category):\r\n        return reverse(\"catalog:category-update\", kwargs={\"pk\": category.id})\r\n\r\n    #test admin can update category\r\n    def test_admin_can_update_category(self,token_admin_client,category,url,):\r\n        data = {\"name\": \"admin updated\",}\r\n        response = token_admin_client.put(url, data)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        category.refresh_from_db()\r\n        assert category.name == \"admin updated\"\r\n\r\n    #test regular user cant update category\r\n    def test_regular_user_cant_update_category(self,token_regular_user_client,category,url,):\r\n        data = {\"name\": \"regular user updated\",}\r\n        response = token_regular_user_client.put(url, data)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n    #test unauthenticated user cant update category\r\n    def test_unauthenticated_user_cant_update_category(self,client,url,):\r\n\r\n        data = {\"name\": \"unauthenticate user updated\",}\r\n        response = client.put(url,data)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n@pytest.mark.django_db\r\nclass TestCategoryDeleteView:\r\n    \"\"\"\r\n    test category delete\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,category):\r\n        return reverse(\"catalog:category-delete\", kwargs={\"pk\": category.id})\r\n\r\n    #test admin can delete category\r\n    def test_admin_can_delete_category(self,token_admin_client,url,category,):\r\n        assert category.is_active is True\r\n        response = token_admin_client.delete(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        category.refresh_from_db()\r\n        assert category.is_active is False\r\n\r\n    #test regular user cant delete category\r\n    def test_regular_user_cannot_delete_category(self,token_regular_user_client,category,url):\r\n        response = token_regular_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n    #test unauthenticated user cant delete category\r\n    def test_unauthenticated_user_cant_delete_category(self,client,url,):\r\n        response = client.delete(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n    #test admin cant delete category with no pk\r\n    def test_delete_nonexistent_category_returns_404(self, token_admin_client):\r\n        url = reverse(\"catalog:category-delete\", kwargs={\"pk\": 9999})\r\n        response = token_admin_client.delete(url)\r\n        assert response.status_code == status.HTTP_404_NOT_FOUND\r\n\r\n@pytest.mark.django_db\r\nclass TestWishListCreateView:\r\n    \"\"\"\r\n    test wishlist creation\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,):\r\n        return reverse(\"catalog:wishlist-create\")\r\n\r\n    #test authenticated user can create wish_list\r\n    def test_authenticated_user_can_create_wishlist(self,token_regular_user_client,url,product,shop, category,):\r\n        data = {\r\n            \"product\":product.id,\r\n        }\r\n        response = token_regular_user_client.post(url,data)\r\n        assert response.status_code == status.HTTP_201_CREATED\r\n        assert response.data[\"product\"][\"id\"] == product.id\r\n\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_cant_create_wishlist(self,client,url,product,):\r\n        data = {\"product\":product.id}\r\n        response = client.post(url,data)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n    #test admin can create\r\n    def test_admin_can_create_wishlist(self,token_admin_client,url,product):\r\n        data = {\"product\":product.id}\r\n        response = token_admin_client.post(url,data)\r\n        assert response.status_code == status.HTTP_201_CREATED\r\n        assert response.data[\"product\"][\"id\"] == product.id\r\n\r\n@pytest.mark.django_db\r\nclass TestWishlistDetailView:\r\n    \"\"\"\r\n    test wishlist detail\r\n    \"\"\"\r\n\r\n    @pytest.fixture\r\n    def url(self,regular_user,product):\r\n        wishlist = Wishlist.objects.create(user = regular_user, product = product)\r\n        return reverse(\"catalog:wishlist-detail\", kwargs={\"pk\": wishlist.id})\r\n\r\n    #tset authenticated user can\r\n    def test_authenticated_user_can_detail_wishlist(self,token_regular_user_client,regular_user,product,url):\r\n        response = token_regular_user_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert \"product\" in response.data\r\n        assert \"id\" in response.data[\"product\"]\r\n        assert \"user\" in response.data\r\n\r\n    #test unauthenticated user cant\r\n    def test_unauthenticated_user_cant_detail_wishlist(self,client,regular_user,product,url):\r\n        response = client.get(url)\r\n        assert response.status_code == status.HTTP_401_UNAUTHORIZED\r\n\r\n@pytest.mark.django_db\r\nclass TestWishListDeleteView:\r\n    \"\"\"\r\n    test wishlist delete\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def wishlist(self,regular_user,product):\r\n        wishlist = Wishlist.objects.create(user = regular_user, product = product)\r\n        return wishlist\r\n\r\n    @pytest.fixture\r\n    def url(self,regular_user,product,wishlist):\r\n        return reverse(\"catalog:wishlist-delete\", kwargs={\"pk\": wishlist.id})\r\n\r\n    #test admin can delete wish_list\r\n    def test_admin_can_delete_wishlist(self,token_admin_client,regular_user,product,url):\r\n        response = token_admin_client.delete(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n\r\n    #test owner can delete wish_list\r\n    def test_owner_can_delete_wishlist(self,token_regular_user_client,regular_user,product,url,wishlist):\r\n        response = token_regular_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        wishlist.refresh_from_db()\r\n        assert wishlist.is_active is False\r\n\r\n    #users cant delete others wish_list\r\n    def test_user_can_delete_other_wishlist(self,token_another_user_client,url,):\r\n        response = token_another_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/tests/catalog/test_catalog_views.py b/ecommerce/tests/catalog/test_catalog_views.py
--- a/ecommerce/tests/catalog/test_catalog_views.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/tests/catalog/test_catalog_views.py	(date 1748963536468)
@@ -1,10 +1,14 @@
-
 import pytest
 from django.urls import reverse
 from rest_framework import status
 from catalog.models import Shop, Category, Wishlist, Product
 
-from tests.conftest import product_seller_user, shop_seller_user, token_admin_client, regular_user
+from tests.conftest import (
+    product_seller_user,
+    shop_seller_user,
+    token_admin_client,
+    regular_user,
+)
 
 
 @pytest.mark.django_db
@@ -12,14 +16,21 @@
     """
     test product list view
     """
+
     @pytest.fixture
     def url(self):
         return reverse("catalog:product-list")
-    #test authenticated user can
-    def test_authenticated_user_can_see_product_list(self, token_regular_user_client, url, ):
+
+    # test authenticated user can
+    def test_authenticated_user_can_see_product_list(
+        self,
+        token_regular_user_client,
+        url,
+    ):
         response = token_regular_user_client.get(url)
         assert response.status_code == status.HTTP_200_OK
-    #test unauthenticated user cant
+
+    # test unauthenticated user cant
     def test_unauthenticated_user_cannot_see_product_list(self, client, url):
         response = client.get(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
@@ -30,20 +41,26 @@
     """
     test product detail view
     """
+
     @pytest.fixture
     def url(self, product):
         return reverse("catalog:product-detail", kwargs={"pk": product.pk})
-    #test authenticated user can
-    def test_authenticated_user_can_see_product_detail(self, token_another_user_client, url, product):
+
+    # test authenticated user can
+    def test_authenticated_user_can_see_product_detail(
+        self, token_another_user_client, url, product
+    ):
         response = token_another_user_client.get(url)
         assert response.status_code == status.HTTP_200_OK
         assert response.data["name"] == product.name
         assert response.data["id"] == product.id
-    #test unauthenticated user cant
+
+    # test unauthenticated user cant
     def test_unauthenticated_user_cannot_see_product_detail(self, client, url):
         response = client.get(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
-    #test with no product
+
+    # test with no product
     def test_return_404_if_product_not_found(self, token_another_user_client, url):
         url = reverse("catalog:product-detail", kwargs={"pk": 999})
         response = token_another_user_client.get(url)
@@ -55,11 +72,12 @@
     """
     test product create
     """
+
     @pytest.fixture
     def url(self, product):
         return reverse("catalog:product-create")
 
-    #admin can create product
+    # admin can create product
     def test_admin_can_create_product(self, token_admin_client, url, shop, category):
         data = {
             "shop": shop.id,
@@ -68,13 +86,15 @@
             "description": "test",
             "image_url": "test",
             "price": 100,
-            "is_active": True
+            "is_active": True,
         }
         response = token_admin_client.post(url, data)
         assert response.status_code == status.HTTP_201_CREATED
 
-    #seler can create product
-    def test_seller_can_create_product(self, token_seller_user_client, url, shop, category):
+    # seler can create product
+    def test_seller_can_create_product(
+        self, token_seller_user_client, url, shop, category
+    ):
         data = {
             "shop": shop.id,
             "category": category.id,
@@ -82,13 +102,15 @@
             "description": "test",
             "image_url": "test",
             "price": 200,
-            "is_active": True
+            "is_active": True,
         }
         response = token_seller_user_client.post(url, data)
         assert response.status_code == status.HTTP_201_CREATED
 
-    #test regular user cant create product
-    def test_regular_user_cannot_create_product(self, token_regular_user_client, url, shop, category):
+    # test regular user cant create product
+    def test_regular_user_cannot_create_product(
+        self, token_regular_user_client, url, shop, category
+    ):
         data = {
             "shop": shop.id,
             "category": category.id,
@@ -96,12 +118,12 @@
             "description": "test",
             "image_url": "test",
             "price": 200,
-            "is_active": True
+            "is_active": True,
         }
         response = token_regular_user_client.post(url, data)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
-    #test create with invalid product
+    # test create with invalid product
     def test_invalid_product_data(self, token_seller_user_client, url):
         data = {
             "name": "test",
@@ -116,23 +138,30 @@
     """
     test product update
     """
+
     @pytest.fixture
     def url(self, product, product_seller_user):
         return reverse("catalog:product-update", kwargs={"pk": product_seller_user.pk})
 
-    #test admin can update product
-    def test_admin_can_update_product(self, token_admin_client, url,product_seller_user):
+    # test admin can update product
+    def test_admin_can_update_product(
+        self, token_admin_client, url, product_seller_user
+    ):
         data = {
             "name": "test3",
         }
-        response = token_admin_client.put(url,data)
+        response = token_admin_client.put(url, data)
         assert response.status_code == status.HTTP_200_OK
         product_seller_user.refresh_from_db()
         assert product_seller_user.name == "test3"
 
-
-    #test seller can update own product
-    def test_seller_can_update_own_product(self, token_seller_user_client, url, product_seller_user,):
+    # test seller can update own product
+    def test_seller_can_update_own_product(
+        self,
+        token_seller_user_client,
+        url,
+        product_seller_user,
+    ):
         data = {
             "name": "test2",
         }
@@ -141,39 +170,49 @@
         product_seller_user.refresh_from_db()
         assert product_seller_user.name == "test2"
 
-    #test another seller cant update other sellers product
-    def test_another_seller_can_update_other_seller_product(self, token_seller2_user_client, url, product_seller_user):
+    # test another seller cant update other sellers product
+    def test_another_seller_can_update_other_seller_product(
+        self, token_seller2_user_client, url, product_seller_user
+    ):
         data = {
             "name": "test3",
         }
         response = token_seller2_user_client.put(url, data)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
+
 @pytest.mark.django_db
 class TestProductDeleteView:
     """
     test product delete
     """
+
     @pytest.fixture
-    def url(self,product, product_seller_user):
+    def url(self, product, product_seller_user):
         return reverse("catalog:product-delete", kwargs={"pk": product_seller_user.pk})
 
-    #test admin can delet product
-    def test_admin_can_delete_product(self, token_admin_client, url, product, product_seller_user):
+    # test admin can delet product
+    def test_admin_can_delete_product(
+        self, token_admin_client, url, product, product_seller_user
+    ):
         response = token_admin_client.delete(url)
         assert response.status_code == status.HTTP_200_OK
         product_seller_user.refresh_from_db()
         assert product_seller_user.is_active is False
 
-    #test seller can delete own product
-    def test_seller_can_delete_own_product(self, token_seller_user_client, url, product, product_seller_user):
+    # test seller can delete own product
+    def test_seller_can_delete_own_product(
+        self, token_seller_user_client, url, product, product_seller_user
+    ):
         response = token_seller_user_client.delete(url)
         assert response.status_code == status.HTTP_200_OK
         product_seller_user.refresh_from_db()
         assert product_seller_user.is_active is False
 
-    #test seller cant delete others product
-    def test_another_seller_can_delete_other_seller_product(self, token_seller2_user_client, url, product_seller_user):
+    # test seller cant delete others product
+    def test_another_seller_can_delete_other_seller_product(
+        self, token_seller2_user_client, url, product_seller_user
+    ):
         response = token_seller2_user_client.delete(url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
         assert product_seller_user.is_active is True
@@ -184,17 +223,23 @@
     """
     test shop list view
     """
+
     @pytest.fixture
-    def url(self, shop,):
+    def url(
+        self,
+        shop,
+    ):
         return reverse("catalog:shop-list")
 
-    #test authenticated user can view shop lists
-    def test_authenticated_user_can_view_shop_list(self, token_regular_user_client, shop, url):
+    # test authenticated user can view shop lists
+    def test_authenticated_user_can_view_shop_list(
+        self, token_regular_user_client, shop, url
+    ):
         response = token_regular_user_client.get(url)
         assert response.status_code == status.HTTP_200_OK
         assert response.data
 
-    #test unauthenticated users cant see shop lists
+    # test unauthenticated users cant see shop lists
     def test_unauthenticated_user_can_view_shop_list(self, client, shop, url):
         response = client.get(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
@@ -205,16 +250,19 @@
     """
     test shop detail
     """
+
     @pytest.fixture
     def url(self, shop):
         return reverse("catalog:shop-detail", kwargs={"pk": shop.pk})
 
-    #test authenticated user can view shop detail
-    def test_authenticated_user_can_view_shop_detail(self, token_regular_user_client, shop, url):
+    # test authenticated user can view shop detail
+    def test_authenticated_user_can_view_shop_detail(
+        self, token_regular_user_client, shop, url
+    ):
         response = token_regular_user_client.get(url)
         assert response.status_code == status.HTTP_200_OK
 
-    #test unauthenticated user cant see shop detail
+    # test unauthenticated user cant see shop detail
     def test_unauthenticated_user_can_view_shop_detail(self, client, shop, url):
         response = client.get(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
@@ -225,34 +273,41 @@
     """
     test shop create
     """
+
     @pytest.fixture
     def url(self, shop):
         return reverse("catalog:shop-create")
+
     @pytest.fixture
     def valid_shop_data(self, address):
-        return {
-            "name": "Test Shop",
-            "address": address.id
-        }
+        return {"name": "Test Shop", "address": address.id}
 
-    #test admin can create shop
-    def test_admin_can_create_shop(self, token_admin_client, shop, url,address,seller_user,valid_shop_data):
-        response = token_admin_client.post(url, data= valid_shop_data)
+    # test admin can create shop
+    def test_admin_can_create_shop(
+        self, token_admin_client, shop, url, address, seller_user, valid_shop_data
+    ):
+        response = token_admin_client.post(url, data=valid_shop_data)
         assert response.status_code == status.HTTP_201_CREATED
 
-    #test seller can create shop
-    def test_seller_can_create_shop(self,token_seller_user_client, shop, url,address,valid_shop_data):
-        response = token_seller_user_client.post(url, data= valid_shop_data)
+    # test seller can create shop
+    def test_seller_can_create_shop(
+        self, token_seller_user_client, shop, url, address, valid_shop_data
+    ):
+        response = token_seller_user_client.post(url, data=valid_shop_data)
         assert response.status_code == status.HTTP_201_CREATED
 
-    #test regular user cannot create shop
-    def test_regular_user_cannot_create_shop(self, token_regular_user_client, shop, url,address,valid_shop_data):
-        response = token_regular_user_client.post(url, data= valid_shop_data)
+    # test regular user cannot create shop
+    def test_regular_user_cannot_create_shop(
+        self, token_regular_user_client, shop, url, address, valid_shop_data
+    ):
+        response = token_regular_user_client.post(url, data=valid_shop_data)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
-    #test unauthenticated user cannot create shop
-    def test_unauthenticated_user_cannot_create_shop(self, client, shop, url,address,valid_shop_data):
-        response = client.post(url, data= valid_shop_data)
+    # test unauthenticated user cannot create shop
+    def test_unauthenticated_user_cannot_create_shop(
+        self, client, shop, url, address, valid_shop_data
+    ):
+        response = client.post(url, data=valid_shop_data)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
 
@@ -261,12 +316,13 @@
     """
     test shop update
     """
+
     @pytest.fixture
     def url(self, shop_seller_user):
         return reverse("catalog:shop-update", kwargs={"pk": shop_seller_user.pk})
 
-    #test admin can update all shops
-    def test_admin_can_update_shop(self, token_admin_client, url,shop_seller_user):
+    # test admin can update all shops
+    def test_admin_can_update_shop(self, token_admin_client, url, shop_seller_user):
         data = {
             "name": "admin update name",
         }
@@ -275,8 +331,10 @@
         shop_seller_user.refresh_from_db()
         assert shop_seller_user.name == "admin update name"
 
-    #test seller can update his own shop
-    def test_owner_can_update_shop(self, token_seller_user_client, url, shop_seller_user):
+    # test seller can update his own shop
+    def test_owner_can_update_shop(
+        self, token_seller_user_client, url, shop_seller_user
+    ):
         data = {
             "name": "owner update name",
         }
@@ -285,8 +343,10 @@
         shop_seller_user.refresh_from_db()
         assert shop_seller_user.name == "owner update name"
 
-    #test seller cant update others shop
-    def test_another_seller_can_update_shop(self, token_seller2_user_client, url, shop_seller_user):
+    # test seller cant update others shop
+    def test_another_seller_can_update_shop(
+        self, token_seller2_user_client, url, shop_seller_user
+    ):
         data = {
             "name": "another owner update name",
         }
@@ -299,26 +359,31 @@
     """
     test shop delete
     """
+
     @pytest.fixture
     def url(self, shop_seller_user):
         return reverse("catalog:shop-delete", kwargs={"pk": shop_seller_user.id})
 
-    #test admin can delete shop
+    # test admin can delete shop
     def test_admin_can_delete_shop(self, token_admin_client, url, shop_seller_user):
         response = token_admin_client.delete(url)
         assert response.status_code == status.HTTP_200_OK
         shop_seller_user.refresh_from_db()
         assert shop_seller_user.is_active is False
 
-    #test owner seller can delete his shop
-    def test_owner_can_delete_shop(self, token_seller_user_client, url, shop_seller_user):
+    # test owner seller can delete his shop
+    def test_owner_can_delete_shop(
+        self, token_seller_user_client, url, shop_seller_user
+    ):
         response = token_seller_user_client.delete(url)
         assert response.status_code == status.HTTP_200_OK
         shop_seller_user.refresh_from_db()
         assert shop_seller_user.is_active is False
 
-    #test seller cant delete another seller shop
-    def test_another_seller_can_delete_shop(self, token_seller2_user_client, url, shop_seller_user):
+    # test seller cant delete another seller shop
+    def test_another_seller_can_delete_shop(
+        self, token_seller2_user_client, url, shop_seller_user
+    ):
         response = token_seller2_user_client.delete(url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
@@ -328,17 +393,26 @@
     """
     test category list
     """
+
     @pytest.fixture
-    def url(self,shop):
+    def url(self, shop):
         return reverse("catalog:category-list")
 
-    #test authenticated user can view
-    def test_authenticated_user_can_view_categories(self,token_regular_user_client,url,):
+    # test authenticated user can view
+    def test_authenticated_user_can_view_categories(
+        self,
+        token_regular_user_client,
+        url,
+    ):
         response = token_regular_user_client.get(url)
         assert response.status_code == status.HTTP_200_OK
 
-    #test unauthenticated user cant
-    def test_unauthenticated_user_cant_view_categories(self,client,url,):
+    # test unauthenticated user cant
+    def test_unauthenticated_user_cant_view_categories(
+        self,
+        client,
+        url,
+    ):
         response = client.get(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
@@ -348,19 +422,29 @@
     """
     test category detail
     """
+
     @pytest.fixture
-    def url(self,category):
+    def url(self, category):
         return reverse("catalog:category-detail", kwargs={"pk": category.id})
 
-    #test authenticated user can view
-    def test_authenticated_user_can_view_category_detail(self,token_regular_user_client,category,url,):
+    # test authenticated user can view
+    def test_authenticated_user_can_view_category_detail(
+        self,
+        token_regular_user_client,
+        category,
+        url,
+    ):
         response = token_regular_user_client.get(url)
         assert response.status_code == status.HTTP_200_OK
         category.refresh_from_db()
         assert category.name == category.name
 
-    #test unauthenticated user cant view
-    def test_unauthenticated_user_cant_view_category_detail(self,client,url,):
+    # test unauthenticated user cant view
+    def test_unauthenticated_user_cant_view_category_detail(
+        self,
+        client,
+        url,
+    ):
         response = client.get(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
@@ -370,140 +454,197 @@
     """
     test create category
     """
+
     @pytest.fixture
-    def url(self,category):
+    def url(self, category):
         return reverse("catalog:category-create")
 
-    #test admin can create category with no parent
-    def test_admin_can_create_category_without_parent(self,token_admin_client,url):
+    # test admin can create category with no parent
+    def test_admin_can_create_category_without_parent(self, token_admin_client, url):
         data = {"name": "Electronic"}
         response = token_admin_client.post(url, data)
         assert response.status_code == status.HTTP_201_CREATED
         assert response.data["name"] == "Electronic"
         assert Category.objects.filter(name="Electronic").exists()
 
-    #test admin can create category with parent
-    def test_admin_can_create_category_with_parent(self,token_admin_client,url):
+    # test admin can create category with parent
+    def test_admin_can_create_category_with_parent(self, token_admin_client, url):
         parent = Category.objects.create(name="Electronic")
-        data = {"name": "labtops","parent":parent.id}
+        data = {"name": "labtops", "parent": parent.id}
         response = token_admin_client.post(url, data)
         assert response.status_code == status.HTTP_201_CREATED
         assert response.data["name"] == "labtops"
         assert response.data["parent"]["id"] == parent.id
 
-    #test regular user cant create category
-    def test_regular_user_cant_create_category(self,token_regular_user_client,url):
+    # test regular user cant create category
+    def test_regular_user_cant_create_category(self, token_regular_user_client, url):
         data = {"name": "Electronic"}
         response = token_regular_user_client.post(url, data)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
-    #test create category with invalid data
-    def test_invalid_data_returns_400(self,token_admin_client,url):
+    # test create category with invalid data
+    def test_invalid_data_returns_400(self, token_admin_client, url):
 
         data = {"parent": ""}
-        response = token_admin_client.post(url,data)
+        response = token_admin_client.post(url, data)
         assert response.status_code == status.HTTP_400_BAD_REQUEST
 
-    #test unauthenticated user cant
-    def test_unauthenticated_user_can_view_category(self,client,url,):
+    # test unauthenticated user cant
+    def test_unauthenticated_user_can_view_category(
+        self,
+        client,
+        url,
+    ):
         data = {"name": "Electronic"}
         response = client.post(url, data)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
+
 @pytest.mark.django_db
 class TestCategoryUpdateView:
     """
     test category update
     """
+
     @pytest.fixture
-    def url(self,category):
+    def url(self, category):
         return reverse("catalog:category-update", kwargs={"pk": category.id})
 
-    #test admin can update category
-    def test_admin_can_update_category(self,token_admin_client,category,url,):
-        data = {"name": "admin updated",}
+    # test admin can update category
+    def test_admin_can_update_category(
+        self,
+        token_admin_client,
+        category,
+        url,
+    ):
+        data = {
+            "name": "admin updated",
+        }
         response = token_admin_client.put(url, data)
         assert response.status_code == status.HTTP_200_OK
         category.refresh_from_db()
         assert category.name == "admin updated"
 
-    #test regular user cant update category
-    def test_regular_user_cant_update_category(self,token_regular_user_client,category,url,):
-        data = {"name": "regular user updated",}
+    # test regular user cant update category
+    def test_regular_user_cant_update_category(
+        self,
+        token_regular_user_client,
+        category,
+        url,
+    ):
+        data = {
+            "name": "regular user updated",
+        }
         response = token_regular_user_client.put(url, data)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
-    #test unauthenticated user cant update category
-    def test_unauthenticated_user_cant_update_category(self,client,url,):
+    # test unauthenticated user cant update category
+    def test_unauthenticated_user_cant_update_category(
+        self,
+        client,
+        url,
+    ):
 
-        data = {"name": "unauthenticate user updated",}
-        response = client.put(url,data)
+        data = {
+            "name": "unauthenticate user updated",
+        }
+        response = client.put(url, data)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
+
 @pytest.mark.django_db
 class TestCategoryDeleteView:
     """
     test category delete
     """
+
     @pytest.fixture
-    def url(self,category):
+    def url(self, category):
         return reverse("catalog:category-delete", kwargs={"pk": category.id})
 
-    #test admin can delete category
-    def test_admin_can_delete_category(self,token_admin_client,url,category,):
+    # test admin can delete category
+    def test_admin_can_delete_category(
+        self,
+        token_admin_client,
+        url,
+        category,
+    ):
         assert category.is_active is True
         response = token_admin_client.delete(url)
         assert response.status_code == status.HTTP_200_OK
         category.refresh_from_db()
         assert category.is_active is False
 
-    #test regular user cant delete category
-    def test_regular_user_cannot_delete_category(self,token_regular_user_client,category,url):
+    # test regular user cant delete category
+    def test_regular_user_cannot_delete_category(
+        self, token_regular_user_client, category, url
+    ):
         response = token_regular_user_client.delete(url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
-    #test unauthenticated user cant delete category
-    def test_unauthenticated_user_cant_delete_category(self,client,url,):
+    # test unauthenticated user cant delete category
+    def test_unauthenticated_user_cant_delete_category(
+        self,
+        client,
+        url,
+    ):
         response = client.delete(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
-    #test admin cant delete category with no pk
+    # test admin cant delete category with no pk
     def test_delete_nonexistent_category_returns_404(self, token_admin_client):
         url = reverse("catalog:category-delete", kwargs={"pk": 9999})
         response = token_admin_client.delete(url)
         assert response.status_code == status.HTTP_404_NOT_FOUND
 
+
 @pytest.mark.django_db
 class TestWishListCreateView:
     """
     test wishlist creation
     """
+
     @pytest.fixture
-    def url(self,):
+    def url(
+        self,
+    ):
         return reverse("catalog:wishlist-create")
 
-    #test authenticated user can create wish_list
-    def test_authenticated_user_can_create_wishlist(self,token_regular_user_client,url,product,shop, category,):
+    # test authenticated user can create wish_list
+    def test_authenticated_user_can_create_wishlist(
+        self,
+        token_regular_user_client,
+        url,
+        product,
+        shop,
+        category,
+    ):
         data = {
-            "product":product.id,
+            "product": product.id,
         }
-        response = token_regular_user_client.post(url,data)
+        response = token_regular_user_client.post(url, data)
         assert response.status_code == status.HTTP_201_CREATED
         assert response.data["product"]["id"] == product.id
 
-    #test unauthenticated user cant
-    def test_unauthenticated_user_cant_create_wishlist(self,client,url,product,):
-        data = {"product":product.id}
-        response = client.post(url,data)
+    # test unauthenticated user cant
+    def test_unauthenticated_user_cant_create_wishlist(
+        self,
+        client,
+        url,
+        product,
+    ):
+        data = {"product": product.id}
+        response = client.post(url, data)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
-    #test admin can create
-    def test_admin_can_create_wishlist(self,token_admin_client,url,product):
-        data = {"product":product.id}
-        response = token_admin_client.post(url,data)
+    # test admin can create
+    def test_admin_can_create_wishlist(self, token_admin_client, url, product):
+        data = {"product": product.id}
+        response = token_admin_client.post(url, data)
         assert response.status_code == status.HTTP_201_CREATED
         assert response.data["product"]["id"] == product.id
 
+
 @pytest.mark.django_db
 class TestWishlistDetailView:
     """
@@ -511,50 +652,64 @@
     """
 
     @pytest.fixture
-    def url(self,regular_user,product):
-        wishlist = Wishlist.objects.create(user = regular_user, product = product)
+    def url(self, regular_user, product):
+        wishlist = Wishlist.objects.create(user=regular_user, product=product)
         return reverse("catalog:wishlist-detail", kwargs={"pk": wishlist.id})
 
-    #tset authenticated user can
-    def test_authenticated_user_can_detail_wishlist(self,token_regular_user_client,regular_user,product,url):
+    # tset authenticated user can
+    def test_authenticated_user_can_detail_wishlist(
+        self, token_regular_user_client, regular_user, product, url
+    ):
         response = token_regular_user_client.get(url)
         assert response.status_code == status.HTTP_200_OK
         assert "product" in response.data
         assert "id" in response.data["product"]
         assert "user" in response.data
 
-    #test unauthenticated user cant
-    def test_unauthenticated_user_cant_detail_wishlist(self,client,regular_user,product,url):
+    # test unauthenticated user cant
+    def test_unauthenticated_user_cant_detail_wishlist(
+        self, client, regular_user, product, url
+    ):
         response = client.get(url)
         assert response.status_code == status.HTTP_401_UNAUTHORIZED
 
+
 @pytest.mark.django_db
 class TestWishListDeleteView:
     """
     test wishlist delete
     """
+
     @pytest.fixture
-    def wishlist(self,regular_user,product):
-        wishlist = Wishlist.objects.create(user = regular_user, product = product)
+    def wishlist(self, regular_user, product):
+        wishlist = Wishlist.objects.create(user=regular_user, product=product)
         return wishlist
 
     @pytest.fixture
-    def url(self,regular_user,product,wishlist):
+    def url(self, regular_user, product, wishlist):
         return reverse("catalog:wishlist-delete", kwargs={"pk": wishlist.id})
 
-    #test admin can delete wish_list
-    def test_admin_can_delete_wishlist(self,token_admin_client,regular_user,product,url):
+    # test admin can delete wish_list
+    def test_admin_can_delete_wishlist(
+        self, token_admin_client, regular_user, product, url
+    ):
         response = token_admin_client.delete(url)
         assert response.status_code == status.HTTP_200_OK
 
-    #test owner can delete wish_list
-    def test_owner_can_delete_wishlist(self,token_regular_user_client,regular_user,product,url,wishlist):
+    # test owner can delete wish_list
+    def test_owner_can_delete_wishlist(
+        self, token_regular_user_client, regular_user, product, url, wishlist
+    ):
         response = token_regular_user_client.delete(url)
         assert response.status_code == status.HTTP_200_OK
         wishlist.refresh_from_db()
         assert wishlist.is_active is False
 
-    #users cant delete others wish_list
-    def test_user_can_delete_other_wishlist(self,token_another_user_client,url,):
+    # users cant delete others wish_list
+    def test_user_can_delete_other_wishlist(
+        self,
+        token_another_user_client,
+        url,
+    ):
         response = token_another_user_client.delete(url)
-        assert response.status_code == status.HTTP_403_FORBIDDEN
\ No newline at end of file
+        assert response.status_code == status.HTTP_403_FORBIDDEN
Index: ecommerce/orders/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\r\n\r\nfrom interactions.urls import app_name\r\nfrom .views import (\r\n    OrderList,\r\n    OrderDetail,\r\n    OrderCreate,\r\n    OrderUpdate,\r\n    OrderDelete,\r\n    OrderItemList,\r\n    OrderItemDetail,\r\n    OrderItemUpdate,\r\n    OrderItemDelete,\r\n    DeliveryCreate,\r\n    DeliveryDelete,\r\n    DeliveryList,\r\n    DeliveryDetail,\r\n)\r\n\r\napp_name = \"orders\"\r\n\r\nurlpatterns = [\r\n    path(\"order\", OrderList.as_view(), name=\"order-list\"),\r\n    path(\"order/<int:pk>\", OrderDetail.as_view(), name=\"order-detail\"),\r\n    path(\"order/create\", OrderCreate.as_view(), name=\"order-create\"),\r\n    path(\"order/update/<int:pk>\", OrderUpdate.as_view(), name=\"order-update\"),\r\n    path(\"order/delete/<int:pk>\", OrderDelete.as_view(), name=\"order-delete\"),\r\n    path(\"orderitem\", OrderItemList.as_view(), name=\"orderitem-list\"),\r\n    path(\"orderitem/<int:pk>\", OrderItemDetail.as_view(), name=\"orderitem-detail\"),\r\n    path(\"orderitem/update/<int:pk>\", OrderItemUpdate.as_view(), name=\"orderitem-update\"),\r\n    path(\"orderitem/delete/<int:pk>\", OrderItemDelete.as_view(), name=\"orderitem-delete\"),\r\n    path(\"delivery\", DeliveryList.as_view(), name=\"delivery-list\"),\r\n    path(\"delivery/<int:pk>\", DeliveryDetail.as_view(), name=\"delivery-detail\"),\r\n    path(\"delivery/create\", DeliveryCreate.as_view(), name=\"delivery-create\"),\r\n    path(\"delivery/delete/<int:pk>\", DeliveryDelete.as_view(), name=\"delivery-delete\"),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/orders/urls.py b/ecommerce/orders/urls.py
--- a/ecommerce/orders/urls.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/orders/urls.py	(date 1748963536218)
@@ -27,8 +27,12 @@
     path("order/delete/<int:pk>", OrderDelete.as_view(), name="order-delete"),
     path("orderitem", OrderItemList.as_view(), name="orderitem-list"),
     path("orderitem/<int:pk>", OrderItemDetail.as_view(), name="orderitem-detail"),
-    path("orderitem/update/<int:pk>", OrderItemUpdate.as_view(), name="orderitem-update"),
-    path("orderitem/delete/<int:pk>", OrderItemDelete.as_view(), name="orderitem-delete"),
+    path(
+        "orderitem/update/<int:pk>", OrderItemUpdate.as_view(), name="orderitem-update"
+    ),
+    path(
+        "orderitem/delete/<int:pk>", OrderItemDelete.as_view(), name="orderitem-delete"
+    ),
     path("delivery", DeliveryList.as_view(), name="delivery-list"),
     path("delivery/<int:pk>", DeliveryDetail.as_view(), name="delivery-detail"),
     path("delivery/create", DeliveryCreate.as_view(), name="delivery-create"),
Index: ecommerce/orders/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom django.shortcuts import get_object_or_404\r\nfrom rest_framework.permissions import IsAuthenticated, IsAdminUser\r\nfrom accounts.views import get_current_user_from_token\r\nfrom .models import Order, OrderItem, Delivery\r\nfrom .serializers import (\r\n    OrderSerializer,\r\n    OrderItem,\r\n    DeliverySerializer,\r\n    OrderItemSerializer,\r\n)\r\nfrom core.permissions import IsOwnerOrAdmin, IsSellerOrAdmin\r\nfrom drf_spectacular.utils import extend_schema\r\n\r\n\r\n@extend_schema(tags=[\"order\"])\r\nclass OrderList(APIView):\r\n    \"\"\"\r\n    list all orders\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAdminUser]\r\n    serializer_class = OrderSerializer\r\n\r\n    def get(self, request):\r\n        orders = Order.objects.all()\r\n        self.check_object_permissions(request, orders)\r\n        serializers = self.serializer_class(orders, many=True)\r\n        return Response(serializers.data)\r\n\r\n\r\n@extend_schema(tags=[\"order\"])\r\nclass OrderDetail(APIView):\r\n    \"\"\"\r\n    detail one order\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = OrderSerializer\r\n\r\n    def get(self, request, pk):\r\n        order = get_object_or_404(Order, pk=pk)\r\n        self.check_object_permissions(request, order)\r\n        serializer = self.serializer_class(order)\r\n        return Response(serializer.data)\r\n\r\n\r\n@extend_schema(tags=[\"order\"])\r\nclass OrderCreate(APIView):\r\n    \"\"\"\r\n    create a new order\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = OrderSerializer\r\n\r\n    def post(self, request):\r\n        currentUser = get_current_user_from_token(request)\r\n        serializers = self.serializer_class(data=request.data)\r\n        if serializers.is_valid():\r\n            serializers.save(user=currentUser)\r\n            return Response(serializers.data, status=status.HTTP_201_CREATED)\r\n        return Response(serializers.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@extend_schema(tags=[\"order\"])\r\nclass OrderUpdate(APIView):\r\n    \"\"\"\r\n    update an order\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = OrderSerializer\r\n\r\n    def put(self, request, pk):\r\n        queryset = get_object_or_404(Order, pk=pk)\r\n        self.check_object_permissions(request, queryset)\r\n        serializers = self.serializer_class(queryset, data=request.data, partial=True)\r\n        if serializers.is_valid():\r\n            serializers.save()\r\n            return Response(serializers.data, status=status.HTTP_200_OK)\r\n        return Response(serializers.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@extend_schema(tags=[\"order\"])\r\nclass OrderDelete(APIView):\r\n    \"\"\"\r\n    delete an order\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = OrderSerializer\r\n\r\n    def delete(self, request, pk):\r\n        object = get_object_or_404(Order, pk=pk)\r\n        self.check_object_permissions(request, object)\r\n        object.is_active = False\r\n        object.save()\r\n        srz_data = self.serializer_class(object)\r\n        return Response(srz_data.data, status=status.HTTP_204_NO_CONTENT)\r\n\r\n@extend_schema(tags=[\"orderitem\"])\r\nclass OrderItemList(APIView):\r\n    \"\"\"\r\n    list all order items\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAdminUser]\r\n    serializer_class = OrderItemSerializer\r\n\r\n    def get(self, request):\r\n        queryset = OrderItem.objects.all()\r\n        for obj in queryset:\r\n            self.check_object_permissions(request, obj)\r\n        srz_data = self.serializer_class(queryset, many=True)\r\n        return Response(srz_data.data)\r\n\r\n@extend_schema(tags=[\"orderitem\"])\r\nclass OrderItemDetail(APIView):\r\n    \"\"\"\r\n    detail one order item\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = OrderItemSerializer\r\n\r\n    def get(self, request, pk):\r\n        orderitem = get_object_or_404(OrderItem, pk=pk)\r\n        self.check_object_permissions(request, orderitem)\r\n        serializers = self.serializer_class(orderitem)\r\n        return Response(serializers.data)\r\n\r\n@extend_schema(tags=[\"orderitem\"])\r\nclass OrderItemUpdate(APIView):\r\n    \"\"\"\r\n    update an order item\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = OrderItemSerializer\r\n\r\n    def put(self, request, pk):\r\n        queryset = get_object_or_404(OrderItem, pk=pk)\r\n        self.check_object_permissions(request, queryset)\r\n        srz_data = self.serializer_class(queryset, data=request.data, partial=True)\r\n        if srz_data.is_valid():\r\n            srz_data.save()\r\n            return Response(srz_data.data, status=status.HTTP_200_OK)\r\n        return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n@extend_schema(tags=[\"orderitem\"])\r\nclass OrderItemDelete(APIView):\r\n    \"\"\"\r\n    delete an order item\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = OrderItemSerializer\r\n\r\n    def delete(self, request, pk):\r\n        object = get_object_or_404(OrderItem, pk=pk)\r\n        self.check_object_permissions(request, object)\r\n        object.is_active = False\r\n        object.save()\r\n        srz_data = self.serializer_class(object)\r\n        return Response(srz_data.data, status=status.HTTP_200_OK)\r\n\r\n@extend_schema(tags=[\"Delivery\"])\r\nclass DeliveryList(APIView):\r\n    \"\"\"\r\n    list all deliveries\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = DeliverySerializer\r\n\r\n    def get(self, request):\r\n        queryset = Delivery.objects.all()\r\n        srz_data = self.serializer_class(queryset, many=True)\r\n        return Response(srz_data.data)\r\n\r\n@extend_schema(tags=[\"Delivery\"])\r\nclass DeliveryDetail(APIView):\r\n    \"\"\"\r\n    detail one delivery\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = DeliverySerializer\r\n\r\n    def get(self, request, pk):\r\n        queryset = get_object_or_404(Delivery, pk=pk)\r\n        srz_data = self.serializer_class(queryset)\r\n        return Response(srz_data.data)\r\n\r\n@extend_schema(tags=[\"Delivery\"])\r\nclass DeliveryCreate(APIView):\r\n    \"\"\"\r\n    create a new delivery\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAdminUser]\r\n    serializer_class = DeliverySerializer\r\n\r\n    def post(self, request):\r\n        srz_data = self.serializer_class(data=request.data)\r\n        if srz_data.is_valid():\r\n            srz_data.save()\r\n            return Response(srz_data.data, status=status.HTTP_201_CREATED)\r\n        return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n@extend_schema(tags=[\"Delivery\"])\r\nclass DeliveryDelete(APIView):\r\n    \"\"\"\r\n    delete an delivery\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAdminUser]\r\n    serializer_class = DeliverySerializer\r\n\r\n    def delete(self, request, pk):\r\n        object = get_object_or_404(Delivery, pk=pk)\r\n        object.is_active = False\r\n        object.save()\r\n        srz_data = self.serializer_class(object)\r\n        return Response(srz_data.data, status=status.HTTP_200_OK)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/orders/views.py b/ecommerce/orders/views.py
--- a/ecommerce/orders/views.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/orders/views.py	(date 1748963536318)
@@ -102,6 +102,7 @@
         srz_data = self.serializer_class(object)
         return Response(srz_data.data, status=status.HTTP_204_NO_CONTENT)
 
+
 @extend_schema(tags=["orderitem"])
 class OrderItemList(APIView):
     """
@@ -118,6 +119,7 @@
         srz_data = self.serializer_class(queryset, many=True)
         return Response(srz_data.data)
 
+
 @extend_schema(tags=["orderitem"])
 class OrderItemDetail(APIView):
     """
@@ -133,6 +135,7 @@
         serializers = self.serializer_class(orderitem)
         return Response(serializers.data)
 
+
 @extend_schema(tags=["orderitem"])
 class OrderItemUpdate(APIView):
     """
@@ -151,6 +154,7 @@
             return Response(srz_data.data, status=status.HTTP_200_OK)
         return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)
 
+
 @extend_schema(tags=["orderitem"])
 class OrderItemDelete(APIView):
     """
@@ -168,6 +172,7 @@
         srz_data = self.serializer_class(object)
         return Response(srz_data.data, status=status.HTTP_200_OK)
 
+
 @extend_schema(tags=["Delivery"])
 class DeliveryList(APIView):
     """
@@ -182,6 +187,7 @@
         srz_data = self.serializer_class(queryset, many=True)
         return Response(srz_data.data)
 
+
 @extend_schema(tags=["Delivery"])
 class DeliveryDetail(APIView):
     """
@@ -196,6 +202,7 @@
         srz_data = self.serializer_class(queryset)
         return Response(srz_data.data)
 
+
 @extend_schema(tags=["Delivery"])
 class DeliveryCreate(APIView):
     """
@@ -212,6 +219,7 @@
             return Response(srz_data.data, status=status.HTTP_201_CREATED)
         return Response(srz_data.errors, status=status.HTTP_400_BAD_REQUEST)
 
+
 @extend_schema(tags=["Delivery"])
 class DeliveryDelete(APIView):
     """
Index: ecommerce/interactions/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\r\nfrom .views import (\r\n    CommentListView,\r\n    CommentDetailView,\r\n    CommentCreateView,\r\n    CommentUpdateView,\r\n    CommentDeleteView,\r\n    RateCreateView,\r\n    RatingDetailView,\r\n)\r\napp_name = \"interactions\"\r\n\r\nurlpatterns = [\r\n    path(\"comments/\", CommentListView.as_view(), name=\"comment-list\"),\r\n    path(\"comments/<int:pk>\", CommentDetailView.as_view(), name=\"comment-detail\"),\r\n    path(\"comments/create\", CommentCreateView.as_view(), name=\"comment-create\"),\r\n    path(\r\n        \"comments/update/<int:pk>\", CommentUpdateView.as_view(), name=\"comment-update\"\r\n    ),\r\n    path(\r\n        \"comments/delete/<int:pk>\", CommentDeleteView.as_view(), name=\"comment-delete\"\r\n    ),\r\n    path(\"rate/create\", RateCreateView.as_view(), name=\"rate-create\"),\r\n    path(\"rate/<int:pk>\", RatingDetailView.as_view(), name=\"rating-detail\"),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/interactions/urls.py b/ecommerce/interactions/urls.py
--- a/ecommerce/interactions/urls.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/interactions/urls.py	(date 1748963536188)
@@ -8,6 +8,7 @@
     RateCreateView,
     RatingDetailView,
 )
+
 app_name = "interactions"
 
 urlpatterns = [
Index: ecommerce/tests/accounts/test_accounts_views_.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom django.urls import reverse\r\nfrom rest_framework import status\r\nfrom tests.conftest import token_admin_client, regular_user, address\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestUserListView:\r\n    @pytest.fixture\r\n    def user_list_url(self):\r\n        return reverse(\"accounts:users\")\r\n    # admin can\r\n    def test_admin_can_view_user_list(self, user_list_url,token_admin_client,admin_user):\r\n        response = token_admin_client.get(user_list_url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert any(user[\"username\"] == admin_user.username for user in response.json()[\"results\"])\r\n    # other users cant\r\n    def test_another_user_cannot_view_user_list(self, user_list_url,token_another_user_client,another_user):\r\n        response = token_another_user_client.get(user_list_url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestUserDetailView:\r\n    \"\"\"\r\n    TEST USER DETAIL\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,regular_user):\r\n        return reverse(\"accounts:userdetail\",kwargs={\"pk\": regular_user.pk})\r\n    #admin can\r\n    def test_admin_can_view_user_detail(self, token_admin_client, admin_user, regular_user,url):\r\n        response = token_admin_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert response.json()[\"username\"] == regular_user.username\r\n        print(response.json())\r\n\r\n    # owner can\r\n    def test_user_can_view_own_detail(self, regular_user, token_regular_user_client,url):\r\n        response = token_regular_user_client.get(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert response.json()[\"email\"] == regular_user.email\r\n    #other users cant\r\n    def test_user_cannot_view_other_user_detail(self, url, token_another_user_client):\r\n        response = token_another_user_client.get(url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestUserUpdateView:\r\n    \"\"\"\r\n    TEST USER UPDATE\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,regular_user):\r\n        return reverse(\"accounts:userupdate\",kwargs={\"pk\": regular_user.pk})\r\n    #admin can\r\n    def test_admin_can_update_user_detail(self, token_admin_client, admin_user, regular_user, url):\r\n        data = {\"username\": \"admin_edited\"}\r\n        response = token_admin_client.put(url, data)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert response.json()[\"username\"] == \"admin_edited\"\r\n    #owner can\r\n    def test_user_can_update_own_info(self, url, regular_user, token_regular_user_client):\r\n        data = {\"username\": \"UpdatedName\"}\r\n        response = token_regular_user_client.put(url, data)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        assert response.json()[\"username\"] == \"UpdatedName\"\r\n    #other users cant\r\n    def test_another_user_can_update_user_detail(self, url, token_another_user_client, another_user):\r\n        data = {\"username\": \"UpdatedName\"}\r\n        response = token_another_user_client.put(url, data)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestUserDeleteView:\r\n    \"\"\"\r\n    TEST USER DELETE\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,regular_user):\r\n        return reverse(\"accounts:userdelete\",kwargs={\"pk\": regular_user.pk})\r\n    #admin can\r\n    def test_admin_can_deactive_user(self, token_admin_client, admin_user, regular_user,url):\r\n        response = token_admin_client.delete(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        regular_user.refresh_from_db()\r\n        assert regular_user.is_active is False\r\n    #owner can\r\n    def test_user_can_deactive_by_owner(self,url,token_regular_user_client,regular_user):\r\n        response = token_regular_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n        regular_user.refresh_from_db()\r\n        assert regular_user.is_active is False\r\n    #other users cant\r\n    def test_another_user_can_deactive_user(self,url,token_another_user_client,another_user):\r\n        response = token_another_user_client.delete(url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n\r\n\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestAddressListView:\r\n    \"\"\"\r\n    TEST FOR ADDRESS LIST\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def address_url(self,admin_user):\r\n        return reverse(\"accounts:address-list\")\r\n    #admin can\r\n    def test_admin_can_view_address_list(self, token_admin_client, admin_user, address_url):\r\n        response = token_admin_client.get(address_url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n    #users cant\r\n    def test_user_can_view_address_list(self, address_url, token_regular_user_client,regular_user):\r\n        response = token_regular_user_client.get(address_url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestAddressDetailView:\r\n    \"\"\"\r\n    TEST FOR ADDRESS DETAIL\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def address_detail_url(self,regular_user,address_regular_user):\r\n        return reverse(\"accounts:address-detail\",kwargs={\"pk\": address_regular_user.pk})\r\n    #admin can\r\n    def test_admin_can_view_address_detail(self, token_admin_client, admin_user, address_detail_url):\r\n        response = token_admin_client.get(address_detail_url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n    #owner can\r\n    def test_user_can_view_address_detail(self, address_detail_url, token_regular_user_client,regular_user):\r\n        response = token_regular_user_client.get(address_detail_url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n    #users cant see another user address\r\n    def test_another_user_view_address_detail_of_others(self, address_detail_url, token_another_user_client,another_user):\r\n        response = token_another_user_client.get(address_detail_url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n        print(response.data)\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestAddressUpdateView:\r\n    \"\"\"\r\n    TEST FOR ADDRESS UPDATE\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def address_update_url(self,regular_user,address_regular_user):\r\n        return reverse(\"accounts:address-update\",kwargs={\"pk\": address_regular_user.pk})\r\n    #admin can\r\n    def test_admin_can_update_address(self, token_admin_client, admin_user, address_update_url):\r\n        response = token_admin_client.put(address_update_url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n    #owers can update their own address\r\n    def test_user_can_update_address(self, address_update_url, token_regular_user_client,regular_user):\r\n        response = token_regular_user_client.put(address_update_url)\r\n        assert response.status_code == status.HTTP_200_OK\r\n    #users cant change another user address\r\n    def test_another_user_update_others_address(self, address_update_url, token_another_user_client,another_user):\r\n        response = token_another_user_client.put(address_update_url)\r\n        assert response.status_code == status.HTTP_403_FORBIDDEN\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestChangePasswordView:\r\n    \"\"\"\r\n    TEST CHANGE PASSWORD\r\n    \"\"\"\r\n    @pytest.fixture\r\n    def url(self,regular_user):\r\n        return reverse(\"accounts:change-password\")\r\n    #user can change his own password\r\n    def test_user_can_change_own_password_correct_old_password(self, token_regular_user_client, regular_user, url):\r\n        data = {\r\n            \"old_password\": \"userpass123\",  # رمز فعلی درست\r\n            \"new_password\": \"newstrongpass123\",\r\n            \"new_password1\": \"newstrongpass123\",\r\n        }\r\n        response = token_regular_user_client.put(url, data)\r\n        print(\"Response status:\", response.status_code)\r\n        print(\"Response data:\", response.json())\r\n        assert response.status_code == status.HTTP_200_OK\r\n    #user cant change his own password with incorrect password\r\n    def test_user_can_change_own_password_incorrect_old_password(self, token_regular_user_client, regular_user, url):\r\n        data = {\r\n            \"old_password\": \"dfgsdfgsdfg\",\r\n            \"new_password\": \"newpassword123\",\r\n            \"new_password1\": \"newpassword123\",\r\n        }\r\n        response = token_regular_user_client.put(url, data)\r\n        print(\"Response status:\", response.status_code)\r\n        print(\"Response data:\", response.json())\r\n        assert response.status_code == status.HTTP_400_BAD_REQUEST\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/tests/accounts/test_accounts_views_.py b/ecommerce/tests/accounts/test_accounts_views_.py
--- a/ecommerce/tests/accounts/test_accounts_views_.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/tests/accounts/test_accounts_views_.py	(date 1748963536338)
@@ -9,141 +9,187 @@
     @pytest.fixture
     def user_list_url(self):
         return reverse("accounts:users")
+
     # admin can
-    def test_admin_can_view_user_list(self, user_list_url,token_admin_client,admin_user):
+    def test_admin_can_view_user_list(
+        self, user_list_url, token_admin_client, admin_user
+    ):
         response = token_admin_client.get(user_list_url)
         assert response.status_code == status.HTTP_200_OK
-        assert any(user["username"] == admin_user.username for user in response.json()["results"])
+        assert any(
+            user["username"] == admin_user.username
+            for user in response.json()["results"]
+        )
+
     # other users cant
-    def test_another_user_cannot_view_user_list(self, user_list_url,token_another_user_client,another_user):
+    def test_another_user_cannot_view_user_list(
+        self, user_list_url, token_another_user_client, another_user
+    ):
         response = token_another_user_client.get(user_list_url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
 
-
 @pytest.mark.django_db
 class TestUserDetailView:
     """
     TEST USER DETAIL
     """
+
     @pytest.fixture
-    def url(self,regular_user):
-        return reverse("accounts:userdetail",kwargs={"pk": regular_user.pk})
-    #admin can
-    def test_admin_can_view_user_detail(self, token_admin_client, admin_user, regular_user,url):
+    def url(self, regular_user):
+        return reverse("accounts:userdetail", kwargs={"pk": regular_user.pk})
+
+    # admin can
+    def test_admin_can_view_user_detail(
+        self, token_admin_client, admin_user, regular_user, url
+    ):
         response = token_admin_client.get(url)
         assert response.status_code == status.HTTP_200_OK
         assert response.json()["username"] == regular_user.username
         print(response.json())
 
     # owner can
-    def test_user_can_view_own_detail(self, regular_user, token_regular_user_client,url):
+    def test_user_can_view_own_detail(
+        self, regular_user, token_regular_user_client, url
+    ):
         response = token_regular_user_client.get(url)
         assert response.status_code == status.HTTP_200_OK
         assert response.json()["email"] == regular_user.email
-    #other users cant
+
+    # other users cant
     def test_user_cannot_view_other_user_detail(self, url, token_another_user_client):
         response = token_another_user_client.get(url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
 
-
-
 @pytest.mark.django_db
 class TestUserUpdateView:
     """
     TEST USER UPDATE
     """
+
     @pytest.fixture
-    def url(self,regular_user):
-        return reverse("accounts:userupdate",kwargs={"pk": regular_user.pk})
-    #admin can
-    def test_admin_can_update_user_detail(self, token_admin_client, admin_user, regular_user, url):
+    def url(self, regular_user):
+        return reverse("accounts:userupdate", kwargs={"pk": regular_user.pk})
+
+    # admin can
+    def test_admin_can_update_user_detail(
+        self, token_admin_client, admin_user, regular_user, url
+    ):
         data = {"username": "admin_edited"}
         response = token_admin_client.put(url, data)
         assert response.status_code == status.HTTP_200_OK
         assert response.json()["username"] == "admin_edited"
-    #owner can
-    def test_user_can_update_own_info(self, url, regular_user, token_regular_user_client):
+
+    # owner can
+    def test_user_can_update_own_info(
+        self, url, regular_user, token_regular_user_client
+    ):
         data = {"username": "UpdatedName"}
         response = token_regular_user_client.put(url, data)
         assert response.status_code == status.HTTP_200_OK
         assert response.json()["username"] == "UpdatedName"
-    #other users cant
-    def test_another_user_can_update_user_detail(self, url, token_another_user_client, another_user):
+
+    # other users cant
+    def test_another_user_can_update_user_detail(
+        self, url, token_another_user_client, another_user
+    ):
         data = {"username": "UpdatedName"}
         response = token_another_user_client.put(url, data)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
 
-
 @pytest.mark.django_db
 class TestUserDeleteView:
     """
     TEST USER DELETE
     """
+
     @pytest.fixture
-    def url(self,regular_user):
-        return reverse("accounts:userdelete",kwargs={"pk": regular_user.pk})
-    #admin can
-    def test_admin_can_deactive_user(self, token_admin_client, admin_user, regular_user,url):
+    def url(self, regular_user):
+        return reverse("accounts:userdelete", kwargs={"pk": regular_user.pk})
+
+    # admin can
+    def test_admin_can_deactive_user(
+        self, token_admin_client, admin_user, regular_user, url
+    ):
         response = token_admin_client.delete(url)
         assert response.status_code == status.HTTP_200_OK
         regular_user.refresh_from_db()
         assert regular_user.is_active is False
-    #owner can
-    def test_user_can_deactive_by_owner(self,url,token_regular_user_client,regular_user):
+
+    # owner can
+    def test_user_can_deactive_by_owner(
+        self, url, token_regular_user_client, regular_user
+    ):
         response = token_regular_user_client.delete(url)
         assert response.status_code == status.HTTP_200_OK
         regular_user.refresh_from_db()
         assert regular_user.is_active is False
-    #other users cant
-    def test_another_user_can_deactive_user(self,url,token_another_user_client,another_user):
+
+    # other users cant
+    def test_another_user_can_deactive_user(
+        self, url, token_another_user_client, another_user
+    ):
         response = token_another_user_client.delete(url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
 
-
-
-
 @pytest.mark.django_db
 class TestAddressListView:
     """
     TEST FOR ADDRESS LIST
     """
+
     @pytest.fixture
-    def address_url(self,admin_user):
+    def address_url(self, admin_user):
         return reverse("accounts:address-list")
-    #admin can
-    def test_admin_can_view_address_list(self, token_admin_client, admin_user, address_url):
+
+    # admin can
+    def test_admin_can_view_address_list(
+        self, token_admin_client, admin_user, address_url
+    ):
         response = token_admin_client.get(address_url)
         assert response.status_code == status.HTTP_200_OK
-    #users cant
-    def test_user_can_view_address_list(self, address_url, token_regular_user_client,regular_user):
+
+    # users cant
+    def test_user_can_view_address_list(
+        self, address_url, token_regular_user_client, regular_user
+    ):
         response = token_regular_user_client.get(address_url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
 
-
-
 @pytest.mark.django_db
 class TestAddressDetailView:
     """
     TEST FOR ADDRESS DETAIL
     """
+
     @pytest.fixture
-    def address_detail_url(self,regular_user,address_regular_user):
-        return reverse("accounts:address-detail",kwargs={"pk": address_regular_user.pk})
-    #admin can
-    def test_admin_can_view_address_detail(self, token_admin_client, admin_user, address_detail_url):
+    def address_detail_url(self, regular_user, address_regular_user):
+        return reverse(
+            "accounts:address-detail", kwargs={"pk": address_regular_user.pk}
+        )
+
+    # admin can
+    def test_admin_can_view_address_detail(
+        self, token_admin_client, admin_user, address_detail_url
+    ):
         response = token_admin_client.get(address_detail_url)
         assert response.status_code == status.HTTP_200_OK
-    #owner can
-    def test_user_can_view_address_detail(self, address_detail_url, token_regular_user_client,regular_user):
+
+    # owner can
+    def test_user_can_view_address_detail(
+        self, address_detail_url, token_regular_user_client, regular_user
+    ):
         response = token_regular_user_client.get(address_detail_url)
         assert response.status_code == status.HTTP_200_OK
-    #users cant see another user address
-    def test_another_user_view_address_detail_of_others(self, address_detail_url, token_another_user_client,another_user):
+
+    # users cant see another user address
+    def test_another_user_view_address_detail_of_others(
+        self, address_detail_url, token_another_user_client, another_user
+    ):
         response = token_another_user_client.get(address_detail_url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
         print(response.data)
@@ -154,19 +200,31 @@
     """
     TEST FOR ADDRESS UPDATE
     """
+
     @pytest.fixture
-    def address_update_url(self,regular_user,address_regular_user):
-        return reverse("accounts:address-update",kwargs={"pk": address_regular_user.pk})
-    #admin can
-    def test_admin_can_update_address(self, token_admin_client, admin_user, address_update_url):
+    def address_update_url(self, regular_user, address_regular_user):
+        return reverse(
+            "accounts:address-update", kwargs={"pk": address_regular_user.pk}
+        )
+
+    # admin can
+    def test_admin_can_update_address(
+        self, token_admin_client, admin_user, address_update_url
+    ):
         response = token_admin_client.put(address_update_url)
         assert response.status_code == status.HTTP_200_OK
-    #owers can update their own address
-    def test_user_can_update_address(self, address_update_url, token_regular_user_client,regular_user):
+
+    # owers can update their own address
+    def test_user_can_update_address(
+        self, address_update_url, token_regular_user_client, regular_user
+    ):
         response = token_regular_user_client.put(address_update_url)
         assert response.status_code == status.HTTP_200_OK
-    #users cant change another user address
-    def test_another_user_update_others_address(self, address_update_url, token_another_user_client,another_user):
+
+    # users cant change another user address
+    def test_another_user_update_others_address(
+        self, address_update_url, token_another_user_client, another_user
+    ):
         response = token_another_user_client.put(address_update_url)
         assert response.status_code == status.HTTP_403_FORBIDDEN
 
@@ -176,11 +234,15 @@
     """
     TEST CHANGE PASSWORD
     """
+
     @pytest.fixture
-    def url(self,regular_user):
+    def url(self, regular_user):
         return reverse("accounts:change-password")
-    #user can change his own password
-    def test_user_can_change_own_password_correct_old_password(self, token_regular_user_client, regular_user, url):
+
+    # user can change his own password
+    def test_user_can_change_own_password_correct_old_password(
+        self, token_regular_user_client, regular_user, url
+    ):
         data = {
             "old_password": "userpass123",  # رمز فعلی درست
             "new_password": "newstrongpass123",
@@ -190,8 +252,11 @@
         print("Response status:", response.status_code)
         print("Response data:", response.json())
         assert response.status_code == status.HTTP_200_OK
-    #user cant change his own password with incorrect password
-    def test_user_can_change_own_password_incorrect_old_password(self, token_regular_user_client, regular_user, url):
+
+    # user cant change his own password with incorrect password
+    def test_user_can_change_own_password_incorrect_old_password(
+        self, token_regular_user_client, regular_user, url
+    ):
         data = {
             "old_password": "dfgsdfgsdfg",
             "new_password": "newpassword123",
@@ -201,4 +266,3 @@
         print("Response status:", response.status_code)
         print("Response data:", response.json())
         assert response.status_code == status.HTTP_400_BAD_REQUEST
-
Index: ecommerce/catalog/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\r\nfrom .views import (\r\n    ProductList,\r\n    ProductDetail,\r\n    ProductCreate,\r\n    ProductUpdate,\r\n    ProductDelete,\r\n    ShopList,\r\n    ShopDelete,\r\n    ShopCreate,\r\n    ShopUpdate,\r\n    ShopDetail,\r\n    CategoryList,\r\n    CategoryDetail,\r\n    CategoryCreate,\r\n    CategoryUpdate,\r\n    CategoryDelete,\r\n    WishlistList,\r\n    WishlistCreate,\r\n    WishlistDelete,\r\n    WishListDetail,\r\n)\r\n\r\napp_name = \"catalog\"\r\n\r\nurlpatterns = [\r\n    path(\"product\", ProductList.as_view(), name=\"product-list\"),\r\n    path(\"product/<int:pk>\", ProductDetail.as_view(), name=\"product-detail\"),\r\n    path(\"product/create\", ProductCreate.as_view(), name=\"product-create\"),\r\n    path(\"product/update/<int:pk>\", ProductUpdate.as_view(), name=\"product-update\"),\r\n    path(\"product/delete/<int:pk>\", ProductDelete.as_view(),name=\"product-delete\"),\r\n    path(\"shop\", ShopList.as_view(),name=\"shop-list\"),\r\n    path(\"shop/<int:pk>\", ShopDetail.as_view(),name=\"shop-detail\"),\r\n    path(\"shop/create\", ShopCreate.as_view(),name=\"shop-create\"),\r\n    path(\"shop/update/<int:pk>\", ShopUpdate.as_view(),name=\"shop-update\"),\r\n    path(\"shop/delete/<int:pk>\", ShopDelete.as_view(),name=\"shop-delete\"),\r\n    path(\"category\", CategoryList.as_view(),name=\"category-list\"),\r\n    path(\"category/<int:pk>\", CategoryDetail.as_view(),name=\"category-detail\"),\r\n    path(\"category/create\", CategoryCreate.as_view(),name=\"category-create\"),\r\n    path(\"category/update/<int:pk>\", CategoryUpdate.as_view(),name=\"category-update\"),\r\n    path(\"category/delete/<int:pk>\", CategoryDelete.as_view(),name=\"category-delete\"),\r\n    path(\"wishlist\", WishlistList.as_view(),name=\"wishlist-list\"),\r\n    path(\"wishlist/<int:pk>\", WishListDetail.as_view(),name=\"wishlist-detail\"),\r\n    path(\"wishlist/create\", WishlistCreate.as_view(),name=\"wishlist-create\"),\r\n    path(\"wishlist/delete/<int:pk>\", WishlistDelete.as_view(),name=\"wishlist-delete\"),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/catalog/urls.py b/ecommerce/catalog/urls.py
--- a/ecommerce/catalog/urls.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/catalog/urls.py	(date 1748963536198)
@@ -28,19 +28,19 @@
     path("product/<int:pk>", ProductDetail.as_view(), name="product-detail"),
     path("product/create", ProductCreate.as_view(), name="product-create"),
     path("product/update/<int:pk>", ProductUpdate.as_view(), name="product-update"),
-    path("product/delete/<int:pk>", ProductDelete.as_view(),name="product-delete"),
-    path("shop", ShopList.as_view(),name="shop-list"),
-    path("shop/<int:pk>", ShopDetail.as_view(),name="shop-detail"),
-    path("shop/create", ShopCreate.as_view(),name="shop-create"),
-    path("shop/update/<int:pk>", ShopUpdate.as_view(),name="shop-update"),
-    path("shop/delete/<int:pk>", ShopDelete.as_view(),name="shop-delete"),
-    path("category", CategoryList.as_view(),name="category-list"),
-    path("category/<int:pk>", CategoryDetail.as_view(),name="category-detail"),
-    path("category/create", CategoryCreate.as_view(),name="category-create"),
-    path("category/update/<int:pk>", CategoryUpdate.as_view(),name="category-update"),
-    path("category/delete/<int:pk>", CategoryDelete.as_view(),name="category-delete"),
-    path("wishlist", WishlistList.as_view(),name="wishlist-list"),
-    path("wishlist/<int:pk>", WishListDetail.as_view(),name="wishlist-detail"),
-    path("wishlist/create", WishlistCreate.as_view(),name="wishlist-create"),
-    path("wishlist/delete/<int:pk>", WishlistDelete.as_view(),name="wishlist-delete"),
+    path("product/delete/<int:pk>", ProductDelete.as_view(), name="product-delete"),
+    path("shop", ShopList.as_view(), name="shop-list"),
+    path("shop/<int:pk>", ShopDetail.as_view(), name="shop-detail"),
+    path("shop/create", ShopCreate.as_view(), name="shop-create"),
+    path("shop/update/<int:pk>", ShopUpdate.as_view(), name="shop-update"),
+    path("shop/delete/<int:pk>", ShopDelete.as_view(), name="shop-delete"),
+    path("category", CategoryList.as_view(), name="category-list"),
+    path("category/<int:pk>", CategoryDetail.as_view(), name="category-detail"),
+    path("category/create", CategoryCreate.as_view(), name="category-create"),
+    path("category/update/<int:pk>", CategoryUpdate.as_view(), name="category-update"),
+    path("category/delete/<int:pk>", CategoryDelete.as_view(), name="category-delete"),
+    path("wishlist", WishlistList.as_view(), name="wishlist-list"),
+    path("wishlist/<int:pk>", WishListDetail.as_view(), name="wishlist-detail"),
+    path("wishlist/create", WishlistCreate.as_view(), name="wishlist-create"),
+    path("wishlist/delete/<int:pk>", WishlistDelete.as_view(), name="wishlist-delete"),
 ]
Index: ecommerce/accounts/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\r\nfrom .views import (\r\n    UserList,\r\n    UserCreate,\r\n    UserDelete,\r\n    UserUpdate,\r\n    AddressDetail,\r\n    AddressCreate,\r\n    AddressUpdate,\r\n    AddressDelete,\r\n    UserDetail,\r\n    AddressList,\r\n    CityList,\r\n    CountryList,\r\n    ChangePasswordView,\r\n)\r\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\r\n\r\napp_name = \"accounts\"\r\nurlpatterns = [\r\n\r\n    path(\"users\", UserList.as_view(),name=\"users\"),\r\n    path(\"user/<int:pk>\", UserDetail.as_view(),name=\"userdetail\"),\r\n    path(\"user/delete/<int:pk>\", UserDelete.as_view(),name=\"userdelete\"),\r\n    path(\"user/update/<int:pk>\", UserUpdate.as_view(),name=\"userupdate\"),\r\n\r\n    path(\"address/<int:pk>\", AddressDetail.as_view(),name=\"address-detail\"),\r\n    path(\"address\", AddressList.as_view(),name=\"address-list\"),\r\n    path(\"address/create\", AddressCreate.as_view()),\r\n    path(\"address/update/<int:pk>\", AddressUpdate.as_view(),name=\"address-update\"),\r\n    path(\"address/delete/<int:pk>\", AddressDelete.as_view()),\r\n\r\n    #list of city and country\r\n    path(\"city\", CityList.as_view()),\r\n    path(\"country\", CountryList.as_view(),name=\"country-list\"),\r\n    #changing password\r\n    path(\"change-password\", ChangePasswordView.as_view(),name=\"change-password\"),\r\n    # register and login\r\n    path(\"register\", UserCreate.as_view(),name=\"register\"),\r\n    path(\"login\", TokenObtainPairView.as_view(), name=\"token_obtain_pair\"),\r\n    path(\"refresh-token\", TokenRefreshView.as_view(), name=\"token_refresh\"),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/accounts/urls.py b/ecommerce/accounts/urls.py
--- a/ecommerce/accounts/urls.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/accounts/urls.py	(date 1748963536198)
@@ -18,25 +18,22 @@
 
 app_name = "accounts"
 urlpatterns = [
-
-    path("users", UserList.as_view(),name="users"),
-    path("user/<int:pk>", UserDetail.as_view(),name="userdetail"),
-    path("user/delete/<int:pk>", UserDelete.as_view(),name="userdelete"),
-    path("user/update/<int:pk>", UserUpdate.as_view(),name="userupdate"),
-
-    path("address/<int:pk>", AddressDetail.as_view(),name="address-detail"),
-    path("address", AddressList.as_view(),name="address-list"),
+    path("users", UserList.as_view(), name="users"),
+    path("user/<int:pk>", UserDetail.as_view(), name="userdetail"),
+    path("user/delete/<int:pk>", UserDelete.as_view(), name="userdelete"),
+    path("user/update/<int:pk>", UserUpdate.as_view(), name="userupdate"),
+    path("address/<int:pk>", AddressDetail.as_view(), name="address-detail"),
+    path("address", AddressList.as_view(), name="address-list"),
     path("address/create", AddressCreate.as_view()),
-    path("address/update/<int:pk>", AddressUpdate.as_view(),name="address-update"),
+    path("address/update/<int:pk>", AddressUpdate.as_view(), name="address-update"),
     path("address/delete/<int:pk>", AddressDelete.as_view()),
-
-    #list of city and country
+    # list of city and country
     path("city", CityList.as_view()),
-    path("country", CountryList.as_view(),name="country-list"),
-    #changing password
-    path("change-password", ChangePasswordView.as_view(),name="change-password"),
+    path("country", CountryList.as_view(), name="country-list"),
+    # changing password
+    path("change-password", ChangePasswordView.as_view(), name="change-password"),
     # register and login
-    path("register", UserCreate.as_view(),name="register"),
+    path("register", UserCreate.as_view(), name="register"),
     path("login", TokenObtainPairView.as_view(), name="token_obtain_pair"),
     path("refresh-token", TokenRefreshView.as_view(), name="token_refresh"),
 ]
Index: ecommerce/interactions/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework.generics import get_object_or_404\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom rest_framework.permissions import IsAuthenticated, IsAdminUser\r\nfrom .models import Comment, Rate\r\nfrom .serializers import CommentSerializer, RateSerializer\r\nfrom core.permissions import IsSellerOrAdmin, IsOwnerOrAdmin\r\nfrom accounts.views import get_current_user_from_token\r\nfrom drf_spectacular.utils import extend_schema\r\nfrom interactions.models import Product\r\n\r\n\r\n@extend_schema(tags=[\"comments\"])\r\nclass CommentCreateView(APIView):\r\n    \"\"\"\r\n    create a new comment\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = CommentSerializer\r\n\r\n    def post(self, request):\r\n        current_user = get_current_user_from_token(request)\r\n        serializer = self.serializer_class(data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save(user=current_user)\r\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@extend_schema(tags=[\"comments\"])\r\nclass CommentListView(APIView):\r\n    \"\"\"\r\n    all comments\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = CommentSerializer\r\n\r\n    def get(self, request):\r\n        comments = Comment.objects.all()\r\n        serializer = self.serializer_class(comments, many=True)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n\r\n@extend_schema(tags=[\"comments\"])\r\nclass CommentDetailView(APIView):\r\n    \"\"\"\r\n    read one comment\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = CommentSerializer\r\n\r\n    def get(self, request, pk):\r\n        comment = get_object_or_404(Comment, pk=pk)\r\n        serializer = self.serializer_class(comment)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n\r\n@extend_schema(tags=[\"comments\"])\r\nclass CommentUpdateView(APIView):\r\n    \"\"\"\r\n    update one comment\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = CommentSerializer\r\n\r\n    def put(self, request, pk):\r\n        comment = get_object_or_404(Comment, pk=pk, parent=None)\r\n        self.check_object_permissions(request,comment)\r\n        serializer = self.serializer_class(comment, data=request.data,partial=True)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_200_OK)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@extend_schema(tags=[\"comments\"])\r\nclass CommentDeleteView(APIView):\r\n    \"\"\"\r\n    delete one comment\r\n    \"\"\"\r\n\r\n    permission_classes = [IsOwnerOrAdmin]\r\n    serializer_class = CommentSerializer\r\n\r\n    def delete(self, request, pk):\r\n        comment = get_object_or_404(Comment, pk=pk)\r\n        self.check_object_permissions(request,comment)\r\n        comment.delete()\r\n        return Response(status=status.HTTP_204_NO_CONTENT)\r\n\r\n\r\n@extend_schema(tags=[\"rating\"])\r\nclass RatingDetailView(APIView):\r\n    \"\"\"\r\n    get one rating\r\n    \"\"\"\r\n\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = RateSerializer\r\n\r\n    def get(self, request, pk):\r\n        comment = get_object_or_404(Comment, parent=None, pk=pk)\r\n        serializer = self.serializer_class(comment)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n\r\n@extend_schema(tags=[\"rating\"])\r\nclass RateCreateView(APIView):\r\n    permission_classes = [IsAuthenticated]\r\n    serializer_class = RateSerializer\r\n\r\n    def post(self, request):\r\n        user = request.user\r\n        product_id = request.data.get(\"product\")\r\n        score = request.data.get(\"score\")\r\n\r\n        # بررسی مقدارهای ورودی\r\n        if not product_id or not score:\r\n            return Response({\"detail\": \"فیلدهای محصول و امتیاز الزامی هستند.\"},\r\n                            status=status.HTTP_400_BAD_REQUEST)\r\n\r\n        try:\r\n            product_id = int(product_id)\r\n            score = int(score)\r\n        except ValueError:\r\n            return Response({\"detail\": \"مقادیر نامعتبر هستند.\"}, status=400)\r\n\r\n        # بررسی وجود محصول\r\n        product = get_object_or_404(Product, id=product_id)\r\n\r\n        # جلوگیری از ثبت تکراری\r\n        if Rate.objects.filter(user=user, product=product).exists():\r\n            return Response({\"detail\": \"شما قبلاً به این محصول امتیاز داده\u200Cاید.\"}, status=400)\r\n\r\n        # ذخیره امتیاز\r\n        data = {\r\n            \"score\": score,\r\n            \"product\": product.id,\r\n        }\r\n        srz_data = self.serializer_class(data=data)\r\n        if srz_data.is_valid():\r\n            srz_data.save(user=user, product=product)  # مقداردهی دستی به فیلدهای read_only\r\n            return Response(srz_data.data, status=201)\r\n        return Response(srz_data.errors, status=400)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/interactions/views.py b/ecommerce/interactions/views.py
--- a/ecommerce/interactions/views.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/interactions/views.py	(date 1748963536278)
@@ -70,8 +70,8 @@
 
     def put(self, request, pk):
         comment = get_object_or_404(Comment, pk=pk, parent=None)
-        self.check_object_permissions(request,comment)
-        serializer = self.serializer_class(comment, data=request.data,partial=True)
+        self.check_object_permissions(request, comment)
+        serializer = self.serializer_class(comment, data=request.data, partial=True)
         if serializer.is_valid():
             serializer.save()
             return Response(serializer.data, status=status.HTTP_200_OK)
@@ -89,7 +89,7 @@
 
     def delete(self, request, pk):
         comment = get_object_or_404(Comment, pk=pk)
-        self.check_object_permissions(request,comment)
+        self.check_object_permissions(request, comment)
         comment.delete()
         return Response(status=status.HTTP_204_NO_CONTENT)
 
@@ -121,8 +121,10 @@
 
         # بررسی مقدارهای ورودی
         if not product_id or not score:
-            return Response({"detail": "فیلدهای محصول و امتیاز الزامی هستند."},
-                            status=status.HTTP_400_BAD_REQUEST)
+            return Response(
+                {"detail": "فیلدهای محصول و امتیاز الزامی هستند."},
+                status=status.HTTP_400_BAD_REQUEST,
+            )
 
         try:
             product_id = int(product_id)
@@ -135,7 +137,9 @@
 
         # جلوگیری از ثبت تکراری
         if Rate.objects.filter(user=user, product=product).exists():
-            return Response({"detail": "شما قبلاً به این محصول امتیاز داده‌اید."}, status=400)
+            return Response(
+                {"detail": "شما قبلاً به این محصول امتیاز داده‌اید."}, status=400
+            )
 
         # ذخیره امتیاز
         data = {
@@ -144,6 +148,8 @@
         }
         srz_data = self.serializer_class(data=data)
         if srz_data.is_valid():
-            srz_data.save(user=user, product=product)  # مقداردهی دستی به فیلدهای read_only
+            srz_data.save(
+                user=user, product=product
+            )  # مقداردهی دستی به فیلدهای read_only
             return Response(srz_data.data, status=201)
         return Response(srz_data.errors, status=400)
Index: ecommerce/interactions/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\nfrom accounts.models import User,Time\r\nfrom catalog.models import Product\r\n\r\n\r\n\r\nclass Rate(Time):\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\r\n    score = models.IntegerField()\r\n\r\n    class Meta:\r\n        unique_together = (\"user\", \"product\")  # هر کاربر یک بار به هر محصول امتیاز می\u200Cده\r\n\r\n    def __str__(self):\r\n        return f\"{self.user.username} - {self.product.name}: {self.score}\"\r\n\r\n\r\nclass Comment(Time):\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"comments\")\r\n    product = models.ForeignKey(\r\n        Product, on_delete=models.CASCADE, related_name=\"comments\"\r\n    )\r\n    text = models.TextField()\r\n    parent = models.ForeignKey(\r\n        \"self\", null=True, blank=True, on_delete=models.CASCADE, related_name=\"replies\"\r\n    )\r\n\r\n    def __str__(self):\r\n        return f\"{self.user.username} on {self.product.name}\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/interactions/models.py b/ecommerce/interactions/models.py
--- a/ecommerce/interactions/models.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/interactions/models.py	(date 1748963536198)
@@ -1,9 +1,8 @@
 from django.db import models
-from accounts.models import User,Time
+from accounts.models import User, Time
 from catalog.models import Product
 
 
-
 class Rate(Time):
     user = models.ForeignKey(User, on_delete=models.CASCADE)
     product = models.ForeignKey(Product, on_delete=models.CASCADE)
Index: ecommerce/interactions/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\r\n\r\nfrom catalog.models import Product\r\nfrom .models import Rate, Comment\r\nfrom accounts.serializers import UserSerializer\r\nfrom catalog.serializers import ProductSerializer\r\n\r\n\r\n\r\nclass RateSerializer(serializers.ModelSerializer):\r\n    product = serializers.PrimaryKeyRelatedField(queryset=Product.objects.all())\r\n    class Meta:\r\n        model = Rate\r\n        fields = ['id', 'user', 'product', 'score']\r\n        read_only_fields = ['user']  # چون کاربر از توکن JWT استخراج میشه\r\n\r\n    def validate_score(self, value):\r\n        if value < 1 or value > 5:\r\n            raise serializers.ValidationError(\"امتیاز باید بین ۱ تا ۵ باشد.\")\r\n        return value\r\n\r\n    def to_representation(self, instance):\r\n            rep = super().to_representation(instance)\r\n            rep[\"product\"] = ProductSerializer(instance.product).data\r\n            rep[\"user\"] = UserSerializer(instance.user).data\r\n            return rep\r\n\r\nclass CommentSerializer(serializers.ModelSerializer):\r\n    product = serializers.PrimaryKeyRelatedField(queryset=Product.objects.all())\r\n\r\n    class Meta:\r\n        model = Comment\r\n        fields = [\"id\", \"product\", \"user\", \"text\", \"parent\"]\r\n        extra_kwargs = {\"user\": {\"read_only\": True}}\r\n\r\n    def to_representation(self, instance):\r\n        rep = super().to_representation(instance)\r\n        rep[\"product\"] = ProductSerializer(instance.product).data\r\n        rep[\"parent\"] = CommentSerializer(instance.parent).data\r\n        return rep\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/interactions/serializers.py b/ecommerce/interactions/serializers.py
--- a/ecommerce/interactions/serializers.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/interactions/serializers.py	(date 1748963536198)
@@ -6,13 +6,13 @@
 from catalog.serializers import ProductSerializer
 
 
-
 class RateSerializer(serializers.ModelSerializer):
     product = serializers.PrimaryKeyRelatedField(queryset=Product.objects.all())
+
     class Meta:
         model = Rate
-        fields = ['id', 'user', 'product', 'score']
-        read_only_fields = ['user']  # چون کاربر از توکن JWT استخراج میشه
+        fields = ["id", "user", "product", "score"]
+        read_only_fields = ["user"]  # چون کاربر از توکن JWT استخراج میشه
 
     def validate_score(self, value):
         if value < 1 or value > 5:
@@ -20,11 +20,12 @@
         return value
 
     def to_representation(self, instance):
-            rep = super().to_representation(instance)
-            rep["product"] = ProductSerializer(instance.product).data
-            rep["user"] = UserSerializer(instance.user).data
-            return rep
+        rep = super().to_representation(instance)
+        rep["product"] = ProductSerializer(instance.product).data
+        rep["user"] = UserSerializer(instance.user).data
+        return rep
 
+
 class CommentSerializer(serializers.ModelSerializer):
     product = serializers.PrimaryKeyRelatedField(queryset=Product.objects.all())
 
Index: ecommerce/tests/accounts/test_accounts_models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\n\r\nfrom tests.conftest import regular_user\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestUserModel():\r\n    \"\"\"test user model\"\"\"\r\n    def test_user_model(self, user):\r\n        user = user\r\n        assert user.username == 'testuser'\r\n        assert user.email == 'test@test.com'\r\n        assert user.phone == '1231535'\r\n        assert user.check_password('test1234/') is True\r\n\r\n\r\n\r\n\r\n@pytest.mark.django_db\r\nclass TestAddressModel:\r\n    \"\"\"test address model\"\"\"\r\n    def test_create_address_valid(self,address,regular_user,city):\r\n\r\n        address =address\r\n        assert address.user == regular_user\r\n        assert address.city == city\r\n        assert address.street == \"test\"\r\n        assert address.zip_code == \"123456\"\r\n\r\n@pytest.mark.django_db\r\nclass TestCityModel:\r\n    \"\"\"test city model\"\"\"\r\n    def test_create_city_valid(self,city,country):\r\n        city = city\r\n        assert city.name == \"test\"\r\n        assert city.country == country\r\n\r\n@pytest.mark.django_db\r\nclass TestCountryModel:\r\n    \"\"\"test country model\"\"\"\r\n    def test_create_country_valid(self,country):\r\n        country = country\r\n        assert country.name == \"iran\"\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/tests/accounts/test_accounts_models.py b/ecommerce/tests/accounts/test_accounts_models.py
--- a/ecommerce/tests/accounts/test_accounts_models.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/tests/accounts/test_accounts_models.py	(date 1748963536228)
@@ -4,41 +4,44 @@
 
 
 @pytest.mark.django_db
-class TestUserModel():
+class TestUserModel:
     """test user model"""
+
     def test_user_model(self, user):
         user = user
-        assert user.username == 'testuser'
-        assert user.email == 'test@test.com'
-        assert user.phone == '1231535'
-        assert user.check_password('test1234/') is True
-
-
+        assert user.username == "testuser"
+        assert user.email == "test@test.com"
+        assert user.phone == "1231535"
+        assert user.check_password("test1234/") is True
 
 
 @pytest.mark.django_db
 class TestAddressModel:
     """test address model"""
-    def test_create_address_valid(self,address,regular_user,city):
+
+    def test_create_address_valid(self, address, regular_user, city):
 
-        address =address
+        address = address
         assert address.user == regular_user
         assert address.city == city
         assert address.street == "test"
         assert address.zip_code == "123456"
 
+
 @pytest.mark.django_db
 class TestCityModel:
     """test city model"""
-    def test_create_city_valid(self,city,country):
+
+    def test_create_city_valid(self, city, country):
         city = city
         assert city.name == "test"
         assert city.country == country
 
+
 @pytest.mark.django_db
 class TestCountryModel:
     """test country model"""
-    def test_create_country_valid(self,country):
+
+    def test_create_country_valid(self, country):
         country = country
         assert country.name == "iran"
-
Index: ecommerce/accounts/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\nfrom django.contrib.auth.admin import UserAdmin\r\n\r\nfrom .models import User, Address, City, Country\r\n\r\nclass CustomUserAdmin(UserAdmin):\r\n    model = User\r\n    list_display =('email','is_active','is_superuser','role')\r\n    list_filter = ('email','is_active','is_superuser')\r\n    search_fields = ('email',)\r\n    ordering = ('-created_at',)\r\n    fieldsets = (\r\n        ('Authentications', {'fields': ('email', 'password','username')}),\r\n        ('Permissions', {'fields': ('is_staff', 'is_superuser', 'is_active','role')}),\r\n        ('Group Permission', {'fields': ('groups','user_permissions')}),\r\n        ('Important dates', {'fields': ('last_login','date_joined')}),\r\n    )\r\n    add_fieldsets = (\r\n        (None, {\r\n            'classes': ('wide',),\r\n            \"fields\": (\"email\",'username', \"password1\", \"password2\",'phone','is_staff', 'is_superuser', 'is_active'),}),\r\n    )\r\n\r\nadmin.site.register(User, CustomUserAdmin)\r\nadmin.site.register(Address)\r\nadmin.site.register(City)\r\nadmin.site.register(Country)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/accounts/admin.py b/ecommerce/accounts/admin.py
--- a/ecommerce/accounts/admin.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/accounts/admin.py	(date 1748963536208)
@@ -3,23 +3,38 @@
 
 from .models import User, Address, City, Country
 
+
 class CustomUserAdmin(UserAdmin):
     model = User
-    list_display =('email','is_active','is_superuser','role')
-    list_filter = ('email','is_active','is_superuser')
-    search_fields = ('email',)
-    ordering = ('-created_at',)
+    list_display = ("email", "is_active", "is_superuser", "role")
+    list_filter = ("email", "is_active", "is_superuser")
+    search_fields = ("email",)
+    ordering = ("-created_at",)
     fieldsets = (
-        ('Authentications', {'fields': ('email', 'password','username')}),
-        ('Permissions', {'fields': ('is_staff', 'is_superuser', 'is_active','role')}),
-        ('Group Permission', {'fields': ('groups','user_permissions')}),
-        ('Important dates', {'fields': ('last_login','date_joined')}),
+        ("Authentications", {"fields": ("email", "password", "username")}),
+        ("Permissions", {"fields": ("is_staff", "is_superuser", "is_active", "role")}),
+        ("Group Permission", {"fields": ("groups", "user_permissions")}),
+        ("Important dates", {"fields": ("last_login", "date_joined")}),
     )
     add_fieldsets = (
-        (None, {
-            'classes': ('wide',),
-            "fields": ("email",'username', "password1", "password2",'phone','is_staff', 'is_superuser', 'is_active'),}),
+        (
+            None,
+            {
+                "classes": ("wide",),
+                "fields": (
+                    "email",
+                    "username",
+                    "password1",
+                    "password2",
+                    "phone",
+                    "is_staff",
+                    "is_superuser",
+                    "is_active",
+                ),
+            },
+        ),
     )
+
 
 admin.site.register(User, CustomUserAdmin)
 admin.site.register(Address)
Index: ecommerce/catalog/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\nfrom django.contrib.auth import get_user_model\r\nfrom accounts.models import Time\r\n\r\nUser = get_user_model()\r\nfrom accounts.models import Address, User\r\n\r\n\r\nclass Category(models.Model):\r\n    name = models.CharField(max_length=100)\r\n    parent = models.ForeignKey(\r\n        \"self\", null=True, blank=True, on_delete=models.CASCADE, related_name=\"children\")\r\n    def __str__(self):\r\n        full_path = [self.name]\r\n        k = self.parent\r\n        while k is not None:\r\n            full_path.append(k.name)\r\n            k = k.parent\r\n        return \" / \".join(full_path[::-1])\r\n    is_active = models.BooleanField(default=True)\r\n\r\n\r\nclass Shop(Time):\r\n    STATUS_CHOICES = (\r\n        (\"PENDING\", \"pending\"),\r\n        (\"APPROVED\", \"approved\"),\r\n        (\"REJECTED\", \"rejected\"),\r\n    )\r\n    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"shops\")\r\n    name = models.CharField(max_length=100)\r\n    status = models.CharField(max_length=100, choices=STATUS_CHOICES, default=\"PENDING\")\r\n    address = models.ForeignKey(Address, on_delete=models.CASCADE, related_name=\"shops\")\r\n    is_active = models.BooleanField(default=True)\r\n\r\n\r\nclass Product(Time):\r\n    shop = models.ForeignKey(Shop, on_delete=models.CASCADE, related_name=\"products\")\r\n    category = models.ForeignKey(\r\n        Category, on_delete=models.CASCADE, related_name=\"products\"\r\n    )\r\n    name = models.CharField(max_length=100)\r\n    description = models.TextField()\r\n    price = models.DecimalField(decimal_places=2, max_digits=10)\r\n    is_active = models.BooleanField(default=True)\r\n    image_url = models.CharField(max_length=200,null=True,blank=True)\r\n\r\n\r\nclass Wishlist(Time):\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"wishlists\")\r\n    product = models.ForeignKey(\r\n        Product, on_delete=models.CASCADE, related_name=\"wishlists\"\r\n    )\r\n    is_active = models.BooleanField(default=True)\r\n\r\n    #avoid repetition\r\n    class Meta:\r\n        unique_together = (\"user\", \"product\")\r\n\r\n    def __str__(self):\r\n        return f\"{self.user.username} -> {self.product.name}\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/catalog/models.py b/ecommerce/catalog/models.py
--- a/ecommerce/catalog/models.py	(revision 5b33359c877c86f061f029782e4bb21ecfc47ae8)
+++ b/ecommerce/catalog/models.py	(date 1748963536218)
@@ -9,7 +9,9 @@
 class Category(models.Model):
     name = models.CharField(max_length=100)
     parent = models.ForeignKey(
-        "self", null=True, blank=True, on_delete=models.CASCADE, related_name="children")
+        "self", null=True, blank=True, on_delete=models.CASCADE, related_name="children"
+    )
+
     def __str__(self):
         full_path = [self.name]
         k = self.parent
@@ -17,6 +19,7 @@
             full_path.append(k.name)
             k = k.parent
         return " / ".join(full_path[::-1])
+
     is_active = models.BooleanField(default=True)
 
 
@@ -42,7 +45,7 @@
     description = models.TextField()
     price = models.DecimalField(decimal_places=2, max_digits=10)
     is_active = models.BooleanField(default=True)
-    image_url = models.CharField(max_length=200,null=True,blank=True)
+    image_url = models.CharField(max_length=200, null=True, blank=True)
 
 
 class Wishlist(Time):
@@ -52,7 +55,7 @@
     )
     is_active = models.BooleanField(default=True)
 
-    #avoid repetition
+    # avoid repetition
     class Meta:
         unique_together = ("user", "product")
 
